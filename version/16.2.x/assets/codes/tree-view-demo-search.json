{"highlightCode":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FlatTreeControl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/cdk/tree'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BehaviorSubject<span class=\"token punctuation\">,</span> combineLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> auditTime<span class=\"token punctuation\">,</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs/operators'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NzTreeFlatDataSource<span class=\"token punctuation\">,</span> NzTreeFlattener <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-antd/tree-view'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n  children<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TREE_DATA<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-0'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-0-0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-0-1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-0-2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-0'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-0-0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-0-1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-1'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-1-0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'0-1-1-1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FlatNode</span> <span class=\"token punctuation\">{</span>\n  expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FilteredTreeResult</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> treeData<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> needsToExpanded<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * From https://stackoverflow.com/a/45290208/6851836\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">filterTreeData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> FilteredTreeResult <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> needsToExpanded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> _filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_filter</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> parentNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>node<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> nodes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        needsToExpanded<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> treeData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_filter</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilteredTreeResult</span><span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>needsToExpanded<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'nz-demo-tree-view-search'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\">template: <span class=\"token html\">`\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-input-group</span> <span class=\"token attr-name\">[nzSuffix]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>suffixIcon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nz-input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">(ngModelChange)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>searchValue$.next($event)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-input-group</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">#suffixIcon</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">nz-icon</span> <span class=\"token attr-name\">nzType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-view</span> <span class=\"token attr-name\">[nzTreeControl]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>treeControl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[nzDataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzNoAnimation</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node</span> <span class=\"token attr-name\">*nzTreeNodeDef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let node<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodePadding</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node-toggle</span> <span class=\"token attr-name\">nzTreeNodeNoopToggle</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node-toggle</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">[innerHTML]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>node.name | nzHighlight: searchValue:<span class=\"token punctuation\">'</span>i<span class=\"token punctuation\">'</span>:<span class=\"token punctuation\">'</span>highlight<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node</span> <span class=\"token attr-name\">*nzTreeNodeDef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let node; when: hasChild<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodePadding</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node-toggle</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">nz-icon</span> <span class=\"token attr-name\">nzType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>caret-down<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodeToggleRotateIcon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node-toggle</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">[innerHTML]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>node.name | nzHighlight: searchValue:<span class=\"token punctuation\">'</span>i<span class=\"token punctuation\">'</span>:<span class=\"token punctuation\">'</span>highlight<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-view</span><span class=\"token punctuation\">></span></span>\n  `</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token styles-string\">styles: [\n    <span class=\"token css\"><span class=\"token selector\">`\n      nz-input-group </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span>px<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token selector\"><span class=\"token pseudo-element\">::ng-deep</span> <span class=\"token class\">.highlight</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    `</span>\n  ]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NzDemoTreeViewSearchComponent</span> <span class=\"token punctuation\">{</span>\n  flatNodeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nestedNodeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span>TreeNode<span class=\"token punctuation\">,</span> FlatNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  expandedNodes<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  searchValue <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  originData$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span>TREE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  searchValue$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  transformer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> FlatNode <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> existingNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nestedNodeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> flatNode <span class=\"token operator\">=</span>\n      existingNode <span class=\"token operator\">&amp;&amp;</span> existingNode<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> node<span class=\"token punctuation\">.</span>name\n        <span class=\"token operator\">?</span> existingNode\n        <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            expandable<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>children <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n            level\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flatNodeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>flatNode<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nestedNodeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> flatNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> flatNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  treeControl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlatTreeControl</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">,</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>expandable<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      trackBy<span class=\"token punctuation\">:</span> flatNode <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flatNodeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>flatNode<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  treeFlattener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NzTreeFlattener</span><span class=\"token operator\">&lt;</span>TreeNode<span class=\"token punctuation\">,</span> FlatNode<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">,</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">,</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>expandable<span class=\"token punctuation\">,</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>children\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NzTreeFlatDataSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeFlattener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  filteredData$ <span class=\"token operator\">=</span> <span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>originData$<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>searchValue$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">auditTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>searchValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">?</span> <span class=\"token function\">filterTreeData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilteredTreeResult</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filteredData$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>treeData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> hasSearchValue <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>searchValue<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasSearchValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expandedNodes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expandedNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">.</span>needsToExpanded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expandedNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expandedNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expandedNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  hasChild <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>expandable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","rawCode":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { auditTime, map } from 'rxjs/operators';\n\nimport { NzTreeFlatDataSource, NzTreeFlattener } from 'ng-zorro-antd/tree-view';\n\ninterface TreeNode {\n  name: string;\n  children?: TreeNode[];\n}\n\nconst TREE_DATA: TreeNode[] = [\n  {\n    name: '0-0',\n    children: [{ name: '0-0-0' }, { name: '0-0-1' }, { name: '0-0-2' }]\n  },\n  {\n    name: '0-1',\n    children: [\n      {\n        name: '0-1-0',\n        children: [{ name: '0-1-0-0' }, { name: '0-1-0-1' }]\n      },\n      {\n        name: '0-1-1',\n        children: [{ name: '0-1-1-0' }, { name: '0-1-1-1' }]\n      }\n    ]\n  }\n];\n\ninterface FlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\nclass FilteredTreeResult {\n  constructor(public treeData: TreeNode[], public needsToExpanded: TreeNode[] = []) {}\n}\n\n/**\n * From https://stackoverflow.com/a/45290208/6851836\n */\nfunction filterTreeData(data: TreeNode[], value: string): FilteredTreeResult {\n  const needsToExpanded = new Set<TreeNode>();\n  const _filter = (node: TreeNode, result: TreeNode[]): TreeNode[] => {\n    if (node.name.search(value) !== -1) {\n      result.push(node);\n      return result;\n    }\n    if (Array.isArray(node.children)) {\n      const nodes = node.children.reduce((a, b) => _filter(b, a), [] as TreeNode[]);\n      if (nodes.length) {\n        const parentNode = { ...node, children: nodes };\n        needsToExpanded.add(parentNode);\n        result.push(parentNode);\n      }\n    }\n    return result;\n  };\n  const treeData = data.reduce((a, b) => _filter(b, a), [] as TreeNode[]);\n  return new FilteredTreeResult(treeData, [...needsToExpanded]);\n}\n\n@Component({\n  selector: 'nz-demo-tree-view-search',\n  template: `\n    <nz-input-group [nzSuffix]=\"suffixIcon\">\n      <input type=\"text\" nz-input placeholder=\"Search\" ngModel (ngModelChange)=\"searchValue$.next($event)\" />\n    </nz-input-group>\n    <ng-template #suffixIcon>\n      <span nz-icon nzType=\"search\"></span>\n    </ng-template>\n\n    <nz-tree-view [nzTreeControl]=\"treeControl\" [nzDataSource]=\"dataSource\" nzNoAnimation>\n      <nz-tree-node *nzTreeNodeDef=\"let node\" nzTreeNodePadding>\n        <nz-tree-node-toggle nzTreeNodeNoopToggle></nz-tree-node-toggle>\n        <span [innerHTML]=\"node.name | nzHighlight: searchValue:'i':'highlight'\"></span>\n      </nz-tree-node>\n\n      <nz-tree-node *nzTreeNodeDef=\"let node; when: hasChild\" nzTreeNodePadding>\n        <nz-tree-node-toggle>\n          <span nz-icon nzType=\"caret-down\" nzTreeNodeToggleRotateIcon></span>\n        </nz-tree-node-toggle>\n        <span [innerHTML]=\"node.name | nzHighlight: searchValue:'i':'highlight'\"></span>\n      </nz-tree-node>\n    </nz-tree-view>\n  `,\n  styles: [\n    `\n      nz-input-group {\n        margin-bottom: 8px;\n      }\n\n      ::ng-deep .highlight {\n        color: red;\n      }\n    `\n  ]\n})\nexport class NzDemoTreeViewSearchComponent {\n  flatNodeMap = new Map<FlatNode, TreeNode>();\n  nestedNodeMap = new Map<TreeNode, FlatNode>();\n  expandedNodes: TreeNode[] = [];\n  searchValue = '';\n  originData$ = new BehaviorSubject(TREE_DATA);\n  searchValue$ = new BehaviorSubject<string>('');\n\n  transformer = (node: TreeNode, level: number): FlatNode => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.name === node.name\n        ? existingNode\n        : {\n            expandable: !!node.children && node.children.length > 0,\n            name: node.name,\n            level\n          };\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  treeControl = new FlatTreeControl<FlatNode, TreeNode>(\n    node => node.level,\n    node => node.expandable,\n    {\n      trackBy: flatNode => this.flatNodeMap.get(flatNode)!\n    }\n  );\n\n  treeFlattener = new NzTreeFlattener<TreeNode, FlatNode, TreeNode>(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children\n  );\n\n  dataSource = new NzTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  filteredData$ = combineLatest([\n    this.originData$,\n    this.searchValue$.pipe(\n      auditTime(300),\n      map(value => (this.searchValue = value))\n    )\n  ]).pipe(map(([data, value]) => (value ? filterTreeData(data, value) : new FilteredTreeResult(data))));\n\n  constructor() {\n    this.filteredData$.subscribe(result => {\n      this.dataSource.setData(result.treeData);\n\n      const hasSearchValue = !!this.searchValue;\n      if (hasSearchValue) {\n        if (this.expandedNodes.length === 0) {\n          this.expandedNodes = this.treeControl.expansionModel.selected;\n          this.treeControl.expansionModel.clear();\n        }\n        this.treeControl.expansionModel.select(...result.needsToExpanded);\n      } else {\n        if (this.expandedNodes.length) {\n          this.treeControl.expansionModel.clear();\n          this.treeControl.expansionModel.select(...this.expandedNodes);\n          this.expandedNodes = [];\n        }\n      }\n    });\n  }\n\n  hasChild = (_: number, node: FlatNode): boolean => node.expandable;\n}\n"}
