{"highlightCode":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CollectionViewer<span class=\"token punctuation\">,</span> DataSource<span class=\"token punctuation\">,</span> SelectionChange <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/cdk/collections'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FlatTreeControl<span class=\"token punctuation\">,</span> TreeControl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/cdk/tree'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BehaviorSubject<span class=\"token punctuation\">,</span> merge<span class=\"token punctuation\">,</span> Observable<span class=\"token punctuation\">,</span> of <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> delay<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> tap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs/operators'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FlatNode</span> <span class=\"token punctuation\">{</span>\n  expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">;</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  label<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  loading<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TREE_DATA<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Expand to load'</span><span class=\"token punctuation\">,</span>\n    level<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Expand to load'</span><span class=\"token punctuation\">,</span>\n    level<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      label<span class=\"token punctuation\">:</span> `Child Node <span class=\"token punctuation\">(</span>level<span class=\"token operator\">-</span>$<span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>`<span class=\"token punctuation\">,</span>\n      level<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      label<span class=\"token punctuation\">:</span> `Child Node <span class=\"token punctuation\">(</span>level<span class=\"token operator\">-</span>$<span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>`<span class=\"token punctuation\">,</span>\n      level<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      label<span class=\"token punctuation\">:</span> `Leaf Node <span class=\"token punctuation\">(</span>level<span class=\"token operator\">-</span>$<span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>`<span class=\"token punctuation\">,</span>\n      level<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      expandable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicDatasource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DataSource</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> flattenedData<span class=\"token punctuation\">:</span> BehaviorSubject<span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> childrenLoadedSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> treeControl<span class=\"token punctuation\">:</span> TreeControl<span class=\"token operator\">&lt;</span>FlatNode<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> initData<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    treeControl<span class=\"token punctuation\">.</span>dataNodes <span class=\"token operator\">=</span> initData<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>collectionViewer<span class=\"token punctuation\">:</span> CollectionViewer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> changes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      collectionViewer<span class=\"token punctuation\">.</span>viewChange<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">.</span>expansionModel<span class=\"token punctuation\">.</span>changed<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>change <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleExpansionChange</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>changes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">expandFlattenedNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">expandFlattenedNodes</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> treeControl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> results<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentExpand<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    currentExpand<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> expand <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> treeControl<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        expand <span class=\"token operator\">=</span> expand <span class=\"token operator\">&amp;&amp;</span> currentExpand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeControl<span class=\"token punctuation\">.</span><span class=\"token function\">isExpandable</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentExpand<span class=\"token punctuation\">[</span>treeControl<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> treeControl<span class=\"token punctuation\">.</span><span class=\"token function\">isExpanded</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleExpansionChange</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">:</span> SelectionChange<span class=\"token operator\">&lt;</span>FlatNode<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">.</span>added<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      change<span class=\"token punctuation\">.</span>added<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadChildren</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">loadChildren</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childrenLoadedSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    node<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>children <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> flattenedData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childrenLoadedSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>flattenedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flattenedData<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'nz-demo-tree-view-dynamic'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\">template: <span class=\"token html\">`\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-view</span> <span class=\"token attr-name\">[nzTreeControl]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>treeControl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[nzDataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node</span> <span class=\"token attr-name\">*nzTreeNodeDef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let node<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodePadding</span><span class=\"token punctuation\">></span></span>\n        {{ node.label }}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node</span> <span class=\"token attr-name\">*nzTreeNodeDef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let node; when: hasChild<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodePadding</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node-toggle</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!node.loading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">nz-icon</span> <span class=\"token attr-name\">nzType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>caret-down<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodeToggleRotateIcon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node-toggle</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree-node-toggle</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>node.loading<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodeNoopToggle</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">nz-icon</span> <span class=\"token attr-name\">nzType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loading<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTreeNodeToggleActiveIcon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node-toggle</span><span class=\"token punctuation\">></span></span>\n        {{ node.label }}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-node</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree-view</span><span class=\"token punctuation\">></span></span>\n  `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NzDemoTreeViewDynamicComponent</span> <span class=\"token punctuation\">{</span>\n  treeControl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlatTreeControl</span><span class=\"token operator\">&lt;</span>FlatNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">,</span>\n    node <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>expandable\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicDatasource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeControl<span class=\"token punctuation\">,</span> TREE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  hasChild <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> FlatNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>expandable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","rawCode":"import { CollectionViewer, DataSource, SelectionChange } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, of } from 'rxjs';\nimport { delay, map, tap } from 'rxjs/operators';\n\ninterface FlatNode {\n  expandable: boolean;\n  id: number;\n  label: string;\n  level: number;\n  loading?: boolean;\n}\n\nconst TREE_DATA: FlatNode[] = [\n  {\n    id: 0,\n    label: 'Expand to load',\n    level: 0,\n    expandable: true\n  },\n  {\n    id: 1,\n    label: 'Expand to load',\n    level: 0,\n    expandable: true\n  }\n];\n\nfunction getChildren(node: FlatNode): Observable<FlatNode[]> {\n  return of([\n    {\n      id: Date.now(),\n      label: `Child Node (level-${node.level + 1})`,\n      level: node.level + 1,\n      expandable: true\n    },\n    {\n      id: Date.now(),\n      label: `Child Node (level-${node.level + 1})`,\n      level: node.level + 1,\n      expandable: true\n    },\n    {\n      id: Date.now(),\n      label: `Leaf Node (level-${node.level + 1})`,\n      level: node.level + 1,\n      expandable: false\n    }\n  ]).pipe(delay(500));\n}\n\nclass DynamicDatasource implements DataSource<FlatNode> {\n  private flattenedData: BehaviorSubject<FlatNode[]>;\n  private childrenLoadedSet = new Set<FlatNode>();\n\n  constructor(private treeControl: TreeControl<FlatNode>, initData: FlatNode[]) {\n    this.flattenedData = new BehaviorSubject<FlatNode[]>(initData);\n    treeControl.dataNodes = initData;\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<FlatNode[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.changed.pipe(tap(change => this.handleExpansionChange(change))),\n      this.flattenedData\n    ];\n    return merge(...changes).pipe(map(() => this.expandFlattenedNodes(this.flattenedData.getValue())));\n  }\n\n  expandFlattenedNodes(nodes: FlatNode[]): FlatNode[] {\n    const treeControl = this.treeControl;\n    const results: FlatNode[] = [];\n    const currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= treeControl.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (treeControl.isExpandable(node)) {\n        currentExpand[treeControl.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n  handleExpansionChange(change: SelectionChange<FlatNode>): void {\n    if (change.added) {\n      change.added.forEach(node => this.loadChildren(node));\n    }\n  }\n\n  loadChildren(node: FlatNode): void {\n    if (this.childrenLoadedSet.has(node)) {\n      return;\n    }\n    node.loading = true;\n    getChildren(node).subscribe(children => {\n      node.loading = false;\n      const flattenedData = this.flattenedData.getValue();\n      const index = flattenedData.indexOf(node);\n      if (index !== -1) {\n        flattenedData.splice(index + 1, 0, ...children);\n        this.childrenLoadedSet.add(node);\n      }\n      this.flattenedData.next(flattenedData);\n    });\n  }\n\n  disconnect(): void {\n    this.flattenedData.complete();\n  }\n}\n\n@Component({\n  selector: 'nz-demo-tree-view-dynamic',\n  template: `\n    <nz-tree-view [nzTreeControl]=\"treeControl\" [nzDataSource]=\"dataSource\">\n      <nz-tree-node *nzTreeNodeDef=\"let node\" nzTreeNodePadding>\n        {{ node.label }}\n      </nz-tree-node>\n\n      <nz-tree-node *nzTreeNodeDef=\"let node; when: hasChild\" nzTreeNodePadding>\n        <nz-tree-node-toggle *ngIf=\"!node.loading\">\n          <span nz-icon nzType=\"caret-down\" nzTreeNodeToggleRotateIcon></span>\n        </nz-tree-node-toggle>\n        <nz-tree-node-toggle *ngIf=\"node.loading\" nzTreeNodeNoopToggle>\n          <span nz-icon nzType=\"loading\" nzTreeNodeToggleActiveIcon></span>\n        </nz-tree-node-toggle>\n        {{ node.label }}\n      </nz-tree-node>\n    </nz-tree-view>\n  `\n})\nexport class NzDemoTreeViewDynamicComponent {\n  treeControl = new FlatTreeControl<FlatNode>(\n    node => node.level,\n    node => node.expandable\n  );\n\n  dataSource = new DynamicDatasource(this.treeControl, TREE_DATA);\n\n  constructor() {}\n\n  hasChild = (_: number, node: FlatNode): boolean => node.expandable;\n}\n"}
