{"highlightCode":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> OnInit <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TreeNodeInterface</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  expand<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">;</span>\n  address<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n  children<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  parent<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'nz-demo-table-expand-children'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\">template: <span class=\"token html\">`\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-table</span> <span class=\"token attr-name\">#expandTable</span> <span class=\"token attr-name\">[nzData]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>listOfMapData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzTableLayout</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fixed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Age<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let data of expandTable.data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let item of mapOfExpandedData[data.key]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(item.parent &amp;&amp; item.parent.expand) || !item.parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span>\n                <span class=\"token attr-name\">[nzIndentSize]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item.level * 20<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">[nzShowExpand]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!!item.children<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">[(nzExpand)]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item.expand<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">(nzExpandChange)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>collapse(mapOfExpandedData[data.key], item, $event)<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token punctuation\">></span></span>\n                {{ item.name }}\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>{{ item.age }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>{{ item.address }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-table</span><span class=\"token punctuation\">></span></span>\n  `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NzDemoTableExpandChildrenComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  listOfMapData<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      key<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John Brown sr.'</span><span class=\"token punctuation\">,</span>\n      age<span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n      address<span class=\"token punctuation\">:</span> <span class=\"token string\">'New York No. 1 Lake Park'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          key<span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John Brown'</span><span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n          address<span class=\"token punctuation\">:</span> <span class=\"token string\">'New York No. 2 Lake Park'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          key<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John Brown jr.'</span><span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n          address<span class=\"token punctuation\">:</span> <span class=\"token string\">'New York No. 3 Lake Park'</span><span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              key<span class=\"token punctuation\">:</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jimmy Brown'</span><span class=\"token punctuation\">,</span>\n              age<span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n              address<span class=\"token punctuation\">:</span> <span class=\"token string\">'New York No. 3 Lake Park'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          key<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jim Green sr.'</span><span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span>\n          address<span class=\"token punctuation\">:</span> <span class=\"token string\">'London No. 1 Lake Park'</span><span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              key<span class=\"token punctuation\">:</span> <span class=\"token number\">131</span><span class=\"token punctuation\">,</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jim Green'</span><span class=\"token punctuation\">,</span>\n              age<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n              address<span class=\"token punctuation\">:</span> <span class=\"token string\">'London No. 2 Lake Park'</span><span class=\"token punctuation\">,</span>\n              children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                  key<span class=\"token punctuation\">:</span> <span class=\"token number\">1311</span><span class=\"token punctuation\">,</span>\n                  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jim Green jr.'</span><span class=\"token punctuation\">,</span>\n                  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n                  address<span class=\"token punctuation\">:</span> <span class=\"token string\">'London No. 3 Lake Park'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                  key<span class=\"token punctuation\">:</span> <span class=\"token number\">1312</span><span class=\"token punctuation\">,</span>\n                  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jimmy Green sr.'</span><span class=\"token punctuation\">,</span>\n                  age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n                  address<span class=\"token punctuation\">:</span> <span class=\"token string\">'London No. 4 Lake Park'</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      key<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Joe Black'</span><span class=\"token punctuation\">,</span>\n      age<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>\n      address<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sidney No. 1 Lake Park'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  mapOfExpandedData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">collapse</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">,</span> $event<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> d<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n          target<span class=\"token punctuation\">.</span>expand <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">collapse</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">convertTreeToList</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stack<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> array<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> hashMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>root<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> expand<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>level<span class=\"token operator\">!</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expand<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">:</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">visitNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">:</span> TreeNodeInterface<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hashMap<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hashMap<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n      array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listOfMapData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapOfExpandedData<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertTreeToList</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","rawCode":"import { Component, OnInit } from '@angular/core';\n\nexport interface TreeNodeInterface {\n  key: number;\n  name: string;\n  age?: number;\n  level?: number;\n  expand?: boolean;\n  address?: string;\n  children?: TreeNodeInterface[];\n  parent?: TreeNodeInterface;\n}\n\n@Component({\n  selector: 'nz-demo-table-expand-children',\n  template: `\n    <nz-table #expandTable [nzData]=\"listOfMapData\" nzTableLayout=\"fixed\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Age</th>\n          <th>Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-container *ngFor=\"let data of expandTable.data\">\n          <ng-container *ngFor=\"let item of mapOfExpandedData[data.key]\">\n            <tr *ngIf=\"(item.parent && item.parent.expand) || !item.parent\">\n              <td\n                [nzIndentSize]=\"item.level * 20\"\n                [nzShowExpand]=\"!!item.children\"\n                [(nzExpand)]=\"item.expand\"\n                (nzExpandChange)=\"collapse(mapOfExpandedData[data.key], item, $event)\"\n              >\n                {{ item.name }}\n              </td>\n              <td>{{ item.age }}</td>\n              <td>{{ item.address }}</td>\n            </tr>\n          </ng-container>\n        </ng-container>\n      </tbody>\n    </nz-table>\n  `\n})\nexport class NzDemoTableExpandChildrenComponent implements OnInit {\n  listOfMapData: TreeNodeInterface[] = [\n    {\n      key: 1,\n      name: 'John Brown sr.',\n      age: 60,\n      address: 'New York No. 1 Lake Park',\n      children: [\n        {\n          key: 11,\n          name: 'John Brown',\n          age: 42,\n          address: 'New York No. 2 Lake Park'\n        },\n        {\n          key: 12,\n          name: 'John Brown jr.',\n          age: 30,\n          address: 'New York No. 3 Lake Park',\n          children: [\n            {\n              key: 121,\n              name: 'Jimmy Brown',\n              age: 16,\n              address: 'New York No. 3 Lake Park'\n            }\n          ]\n        },\n        {\n          key: 13,\n          name: 'Jim Green sr.',\n          age: 72,\n          address: 'London No. 1 Lake Park',\n          children: [\n            {\n              key: 131,\n              name: 'Jim Green',\n              age: 42,\n              address: 'London No. 2 Lake Park',\n              children: [\n                {\n                  key: 1311,\n                  name: 'Jim Green jr.',\n                  age: 25,\n                  address: 'London No. 3 Lake Park'\n                },\n                {\n                  key: 1312,\n                  name: 'Jimmy Green sr.',\n                  age: 18,\n                  address: 'London No. 4 Lake Park'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      key: 2,\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park'\n    }\n  ];\n  mapOfExpandedData: { [key: string]: TreeNodeInterface[] } = {};\n\n  collapse(array: TreeNodeInterface[], data: TreeNodeInterface, $event: boolean): void {\n    if (!$event) {\n      if (data.children) {\n        data.children.forEach(d => {\n          const target = array.find(a => a.key === d.key)!;\n          target.expand = false;\n          this.collapse(array, target, false);\n        });\n      } else {\n        return;\n      }\n    }\n  }\n\n  convertTreeToList(root: TreeNodeInterface): TreeNodeInterface[] {\n    const stack: TreeNodeInterface[] = [];\n    const array: TreeNodeInterface[] = [];\n    const hashMap = {};\n    stack.push({ ...root, level: 0, expand: false });\n\n    while (stack.length !== 0) {\n      const node = stack.pop()!;\n      this.visitNode(node, hashMap, array);\n      if (node.children) {\n        for (let i = node.children.length - 1; i >= 0; i--) {\n          stack.push({ ...node.children[i], level: node.level! + 1, expand: false, parent: node });\n        }\n      }\n    }\n\n    return array;\n  }\n\n  visitNode(node: TreeNodeInterface, hashMap: { [key: string]: boolean }, array: TreeNodeInterface[]): void {\n    if (!hashMap[node.key]) {\n      hashMap[node.key] = true;\n      array.push(node);\n    }\n  }\n\n  ngOnInit(): void {\n    this.listOfMapData.forEach(item => {\n      this.mapOfExpandedData[item.key] = this.convertTreeToList(item);\n    });\n  }\n}\n"}
