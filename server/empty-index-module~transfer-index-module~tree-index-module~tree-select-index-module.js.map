{"version":3,"sources":["./publish/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-highlight.js","./publish/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-tree.js","./publish/__ivy_ngcc__/fesm2015/ng-zorro-antd-tree.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;;AAE/C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AAC2B;AACxC;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,oBAAoB,kDAAkD;AACtE,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,qBAAqB;AACzC,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,4EAA4E;AAC5E,mBAAmB,EAAE;AACrB,wDAAwD,wBAAwB,IAAI,wBAAwB;AAC5G;AACA,uFAAuF,MAAM;AAC7F;AACA;AACA;AACA,4DAA4D,qCAAqC;AACjG,wBAAwB,0DAAmB,EAAE,yDAAyD;AACtG,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,yBAAyB,8DAAuB,EAAE,0BAA0B;AAC5E,yBAAyB,8DAAuB,EAAE,iDAAiD,uCAAuC,EAAE,aAAa,4DAAY,IAAI;AACzK,cAAc,oDAAoD,gEAAyB,qBAAqB,4BAA4B,0BAA0B,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB,0BAA0B,EAAE,EAAE,EAAE,EAAE;AACnR,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA,0BAA0B,4DAAY;AACtC;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE8C;;AAE9C,wD;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACD;AACpB;;AAEvC;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACwC;AACxC,wBAAwB;AACxB,WAAW,EAaV;AACD;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAwBV;AACD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,QAAQ,iFAAe;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,QAAQ,iFAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,QAAQ,iFAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,qDAAqD,EAAE;AACvD,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EA0FV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAmBV;AACD;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAOV;AACD;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,MAAM,GAAG,MAAM;AAC7B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,UAAU;AACzB;AACA,eAAe,sBAAsB;AACrC,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA,8CAA8C,sCAAsC;AACpF,8CAA8C,+BAA+B;AAC7E,8CAA8C;AAC9C,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC;AAClC;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,8CAA8C,+BAA+B;AAC7E,8CAA8C,yBAAyB;AACvE,8CAA8C;AAC9C,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC;AAClC;AACA;AACA,8CAA8C,yCAAyC;AACvF,8CAA8C,mCAAmC;AACjF,8CAA8C;AAC9C,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC;AAClC;AACA;AACA,8CAA8C,+BAA+B;AAC7E,8CAA8C;AAC9C,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gEAAgE,uCAAuC;AACvG,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C,WAAW,EAyBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,0CAA0C,4DAAc;;AAExD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa,kBAAkB,oBAAoB;AAC3E,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEsJ;;AAEtJ,mD;;;;;;;;;;;;AChrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmF;AACpC;AACwL;AACtK;AAC6B;AACnC;AACT;AACsE;AAChF;AACE;AACU;AACP;AACU;AACL;AACQ;AACN;AACH;;AAEjD,yDAAyD;AACzD,IAAI,uDAAgB;AACpB,CAAC;AACD;AACA,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD,qGAAqG;AACrG,IAAI,qEAA8B;AAClC,IAAI,uDAAgB;AACpB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,yDAAkB;AACtB,CAAC;AACD,+BAA+B,SAAS,6BAA6B;AACrE,sFAAsF;AACtF,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,mFAAmF,6DAAsB;AAC9H,CAAC;AACD,uEAAuE;AACvE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,gBAAgB,yDAAkB;AAClC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,yGAAyG;AACzG,IAAI,uDAAgB;AACpB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD,yGAAyG;AACzG,IAAI,uDAAgB;AACpB,CAAC;AACD,qGAAqG;AACrG,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,sFAAsF;AACtF,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,mFAAmF,6DAAsB;AAC9H,CAAC;AACD,uEAAuE;AACvE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,gBAAgB,yDAAkB;AAClC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,sEAAsE;AACtE,IAAI,uDAAgB;AACpB,CAAC;AACD,IAAI,wDAAiB;AACrB,CAAC;AACD,mEAAmE;AACnE,+EAA+E;AAC/E,IAAI,uDAAgB;AACpB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD,2EAA2E;AAC3E,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,oEAAoE;AACpE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,oDAAa;AACjB,IAAI,mEAA4B;AAChC,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,cAAc,yDAAkB,kEAAkE,4DAAqB;AAC5I,CAAC;AACD,wEAAwE;AACxE,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,wHAAwH,CAAC,2DAAoB,MAAM,gBAAgB,2DAAoB,GAAG,mCAAmC,EAAE;AACpP,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD,wEAAwE;AACxE,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,wHAAwH,CAAC,2DAAoB,MAAM,gBAAgB,2DAAoB,GAAG,qCAAqC,EAAE;AACtP,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA,uGAAuG;AACvG,2BAA2B,SAAS,iBAAiB;AACrD,yFAAyF;AACzF,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD;AACA,IAAI,2DAAoB;AACxB,gBAAgB,yDAAkB;AAClC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,qDAAqD,6DAAsB;AAChG,CAAC;AACD,0EAA0E;AAC1E,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,yDAAkB;AACtB,IAAI,yDAAkB;AACtB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,+EAA+E;AAC/E,iEAAiE;AACjE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD;AACA,IAAI,2DAAoB;AACxB,gBAAgB,yDAAkB;AAClC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,qDAAqD,6DAAsB;AAChG,CAAC;AACD,kDAAkD;AAClD,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,yDAAkB;AACtB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,0DAA0D;AAC1D,iBAAiB,8DAAuB;AACxC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,mHAAmH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,sGAAsG,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,4GAA4G,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,kHAAkH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,wHAAwH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,kHAAkH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,kHAAkH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,gHAAgH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,kHAAkH,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,8GAA8G,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE,wGAAwG,CAAC,2DAAoB,OAAO,iBAAiB,2DAAoB,GAAG,4CAA4C,EAAE;AACt8E,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACoD;AACN;AACQ;AACb;AACC;AACQ;AACe;AACM;;AAExE;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8EAA8E,EAAE;AAChF,4EAA4E,EAAE;AAC9E;AACA,oFAAoF,EAAE;AACtF,kFAAkF,EAAE;AACpF;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,wEAAwE,2CAA2C;AACnH,6BAA6B,+DAAwB,EAAE,gJAAgJ;AACvM,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,uGAAuG,yCAAyC,kEAA2B,mJAAmJ;AAChV,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,uDAAc,EAAE,uDAAc,yCAAyC;AAC7F;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,eAAe,OAAO,mDAAK,EAAE;AAC7B,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAwB,EAAE,oKAAoK;AACjO,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,yJAAyJ,uFAAuF;AAClQ,QAAQ,uDAAgB;AACxB,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,wCAAwC;AAC/C;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,yBAAyB,OAAO,mDAAK,EAAE;AACvC;AACA,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAwB,EAAE,oKAAoK;AACjO,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,iNAAiN,6oBAA6oB;AACh3B,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB,sFAAsF,oEAA6B;AAC5I,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,oDAAW,EAAE,yFAAsC,EAAE,kEAAsB,yCAAyC;AAC1I;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,mDAAK,EAAE;AAC5B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC;AACA,WAAW,EAiBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8EAA8E,8CAA8C;AAC5H,gCAAgC,+DAAwB,EAAE,2JAA2J;AACrN,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,qUAAqU,oZAAoZ;AAC3uB,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB,kEAAkE,6DAAsB;AACjH,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,gEAAuB,EAAE,oDAAW,EAAE,kEAAsB,WAAW,4EAAsB,yCAAyC;AAC5J;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,eAAe,OAAO,mDAAK,EAAE;AAC7B,YAAY,OAAO,mDAAK,EAAE;AAC1B,aAAa,OAAO,mDAAK,EAAE;AAC3B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,cAAc,OAAO,mDAAK,EAAE;AAC5B;AACA,WAAW,EA6BV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC,8BAA8B,0DAAY;AAC1C,iCAAiC,0DAAY;AAC7C,oCAAoC,0DAAY;AAChD,kCAAkC,0DAAY;AAC9C,iCAAiC,0DAAY;AAC7C,iCAAiC,0DAAY;AAC7C,gCAAgC,0DAAY;AAC5C,iCAAiC,0DAAY;AAC7C,4BAA4B,0DAAY;AACxC,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,wDAAwD,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,oCAAoC,6CAAO;AAC3C,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,gBAAgB,uDAAS;AACzB,0BAA0B,iEAAS;AACnC;AACA,2BAA2B,EAAE;AAC7B,4BAA4B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AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,iHAAiH;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,+EAAe;AACxC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4FAA4F,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8CAA8C,iEAAS;AACvD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,yEAAwB,GAAG,+DAAwB,CAAC,yEAAsB,GAAG,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,sFAA6B,MAAM;AACrT,uBAAuB,+DAAwB,EAAE,8HAA8H;AAC/K,QAAQ,kEAA2B;AACnC,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,sDAAsD;AAC7D,QAAQ,yDAAkB,CAAC,+EAAwB,QAAQ,+EAAwB;AACnF,KAAK;AACL;AACA,QAAQ,4DAAqB,MA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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,8DAA8D,WAAW,6CAA6C;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,uGAAuG,6CAA6C;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,yEAAwB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,uDAAgB,EAAE,GAAG,OAAO,wDAAiB,EAAE,GAAG,OAAO,+DAAwB,EAAE,GAAG,OAAO,sFAA6B;AAC7N,sBAAsB,kDAAI;AAC1B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,6BAA6B,gFAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,uFAAuF,kBAAkB;AACzG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,uFAAuF,kBAAkB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"empty-index-module~transfer-index-module~tree-index-module~tree-select-index-module.js","sourcesContent":["import { Pipe, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value\n        .replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    (match) => {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return `&#${(hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000};`;\n    }))\n        .replace(NON_ALPHANUMERIC_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    (match) => `&#${match.charCodeAt(0)};`))\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nclass NzHighlightPipe {\n    constructor() {\n        this.UNIQUE_WRAPPERS = ['##==-open_tag-==##', '##==-close_tag-==##'];\n    }\n    /**\n     * @param {?} value\n     * @param {?} highlightValue\n     * @param {?=} flags\n     * @param {?=} klass\n     * @return {?}\n     */\n    transform(value, highlightValue, flags, klass) {\n        if (!highlightValue) {\n            return value;\n        }\n        // Escapes regex keyword to interpret these characters literally\n        /** @type {?} */\n        const searchValue = new RegExp(highlightValue.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&'), flags);\n        /** @type {?} */\n        const wrapValue = value.replace(searchValue, `${this.UNIQUE_WRAPPERS[0]}$&${this.UNIQUE_WRAPPERS[1]}`);\n        return encodeEntities(wrapValue)\n            .replace(new RegExp(this.UNIQUE_WRAPPERS[0], 'g'), klass ? `<span class=\"${klass}\">` : '<span>')\n            .replace(new RegExp(this.UNIQUE_WRAPPERS[1], 'g'), '</span>');\n    }\n}\nNzHighlightPipe.ɵfac = function NzHighlightPipe_Factory(t) { return new (t || NzHighlightPipe)(); };\nNzHighlightPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"nzHighlight\", type: NzHighlightPipe, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzHighlightPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'nzHighlight',\n                pure: true\n            }]\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NzHighlightPipe.prototype.UNIQUE_WRAPPERS;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzHighlightModule {\n}\nNzHighlightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NzHighlightModule });\nNzHighlightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NzHighlightModule_Factory(t) { return new (t || NzHighlightModule)(); }, imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzHighlightModule, { declarations: function () { return [NzHighlightPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NzHighlightPipe]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzHighlightModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [NzHighlightPipe],\n                declarations: [NzHighlightPipe]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-highlight.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NzHighlightModule, NzHighlightPipe };\n\n//# sourceMappingURL=ng-zorro-antd-core-highlight.js.map","import { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-base-node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction FlattenNode() { }\nif (false) {\n    /** @type {?} */\n    FlattenNode.prototype.parent;\n    /** @type {?} */\n    FlattenNode.prototype.children;\n    /** @type {?} */\n    FlattenNode.prototype.pos;\n    /** @type {?} */\n    FlattenNode.prototype.data;\n    /** @type {?} */\n    FlattenNode.prototype.isStart;\n    /** @type {?} */\n    FlattenNode.prototype.isEnd;\n}\n/**\n * @record\n */\nfunction NzTreeNodeOptions() { }\nif (false) {\n    /** @type {?} */\n    NzTreeNodeOptions.prototype.title;\n    /** @type {?} */\n    NzTreeNodeOptions.prototype.key;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.icon;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.isLeaf;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.checked;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.selected;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.selectable;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.disabled;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.disableCheckbox;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.expanded;\n    /** @type {?|undefined} */\n    NzTreeNodeOptions.prototype.children;\n    /* Skipping unhandled member: [key: string]: NzSafeAny;*/\n}\nclass NzTreeNode {\n    /**\n     * Init nzTreeNode\n     * @param {?} option\n     * @param {?=} parent\n     * @param {?=} service\n     */\n    constructor(option, parent = null, service = null) {\n        this._title = '';\n        this.level = 0;\n        // Parent Node\n        this.parentNode = null;\n        this._icon = '';\n        this._children = [];\n        this._isLeaf = false;\n        this._isChecked = false;\n        /**\n         * @deprecated Maybe removed in next major version, use isChecked instead\n         */\n        this._isAllChecked = false;\n        this._isSelectable = false;\n        this._isDisabled = false;\n        this._isDisableCheckbox = false;\n        this._isExpanded = false;\n        this._isHalfChecked = false;\n        this._isSelected = false;\n        this._isLoading = false;\n        this.canHide = false;\n        this.isMatched = false;\n        this.service = null;\n        if (option instanceof NzTreeNode) {\n            return option;\n        }\n        this.service = service || null;\n        this.origin = option;\n        this.key = option.key;\n        this.parentNode = parent;\n        this._title = option.title || '---';\n        this._icon = option.icon || '';\n        this._isLeaf = option.isLeaf || false;\n        this._children = [];\n        // option params\n        this._isChecked = option.checked || false;\n        this._isSelectable = option.disabled || option.selectable !== false;\n        this._isDisabled = option.disabled || false;\n        this._isDisableCheckbox = option.disableCheckbox || false;\n        this._isExpanded = option.isLeaf ? false : option.expanded || false;\n        this._isHalfChecked = false;\n        this._isSelected = (!option.disabled && option.selected) || false;\n        this._isLoading = false;\n        this.isMatched = false;\n        /**\n         * parent's checked status will affect children while initializing\n         */\n        if (parent) {\n            this.level = parent.level + 1;\n        }\n        else {\n            this.level = 0;\n        }\n        if (typeof option.children !== 'undefined' && option.children !== null) {\n            option.children.forEach((/**\n             * @param {?} nodeOptions\n             * @return {?}\n             */\n            nodeOptions => {\n                /** @type {?} */\n                const s = this.treeService;\n                if (s && !s.isCheckStrictly && option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n                    nodeOptions.checked = option.checked;\n                }\n                this._children.push(new NzTreeNode(nodeOptions, this));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get treeService() {\n        return this.service || (this.parentNode && this.parentNode.treeService);\n    }\n    /**\n     * auto generate\n     * get\n     * set\n     * @return {?}\n     */\n    get title() {\n        return this._title;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set title(value) {\n        this._title = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get icon() {\n        return this._icon;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set icon(value) {\n        this._icon = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        return this._children;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set children(value) {\n        this._children = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get isLeaf() {\n        return this._isLeaf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isLeaf(value) {\n        this._isLeaf = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get isChecked() {\n        return this._isChecked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isChecked(value) {\n        this._isChecked = value;\n        this._isAllChecked = value;\n        this.origin.checked = value;\n        this.afterValueChange('isChecked');\n    }\n    /**\n     * @return {?}\n     */\n    get isAllChecked() {\n        return this._isAllChecked;\n    }\n    /**\n     * @deprecated Maybe removed in next major version, use `isChecked` instead.\n     * @param {?} value\n     * @return {?}\n     */\n    set isAllChecked(value) {\n        warnDeprecation(`'isAllChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n        this._isAllChecked = value;\n    }\n    /**\n     * @return {?}\n     */\n    get isHalfChecked() {\n        return this._isHalfChecked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isHalfChecked(value) {\n        this._isHalfChecked = value;\n        this.afterValueChange('isHalfChecked');\n    }\n    /**\n     * @return {?}\n     */\n    get isSelectable() {\n        return this._isSelectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isSelectable(value) {\n        this._isSelectable = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get isDisabled() {\n        return this._isDisabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isDisabled(value) {\n        this._isDisabled = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get isDisableCheckbox() {\n        return this._isDisableCheckbox;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isDisableCheckbox(value) {\n        this._isDisableCheckbox = value;\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._isExpanded;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isExpanded(value) {\n        this._isExpanded = value;\n        this.origin.expanded = value;\n        this.afterValueChange('isExpanded');\n        this.afterValueChange('reRender');\n    }\n    /**\n     * @return {?}\n     */\n    get isSelected() {\n        return this._isSelected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isSelected(value) {\n        this._isSelected = value;\n        this.origin.selected = value;\n        this.afterValueChange('isSelected');\n    }\n    /**\n     * @return {?}\n     */\n    get isLoading() {\n        return this._isLoading;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isLoading(value) {\n        this._isLoading = value;\n        this.update();\n    }\n    /**\n     * @param {?=} checked\n     * @param {?=} halfChecked\n     * @return {?}\n     */\n    setSyncChecked(checked = false, halfChecked = false) {\n        this.setChecked(checked, halfChecked);\n        if (this.treeService && !this.treeService.isCheckStrictly) {\n            this.treeService.conduct(this);\n        }\n    }\n    /**\n     * @deprecated Maybe removed in next major version, use `isChecked` instead.\n     * @param {?=} checked\n     * @param {?=} halfChecked\n     * @return {?}\n     */\n    setChecked(checked = false, halfChecked = false) {\n        warnDeprecation(`'setChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n        this.origin.checked = checked;\n        this.isChecked = checked;\n        this.isAllChecked = checked;\n        this.isHalfChecked = halfChecked;\n    }\n    /**\n     * \\@not-deprecated Maybe removed in next major version, use `isExpanded` instead.\n     * We need it until tree refactoring is finished\n     * @param {?} value\n     * @return {?}\n     */\n    setExpanded(value) {\n        this._isExpanded = value;\n        this.origin.expanded = value;\n        this.afterValueChange('isExpanded');\n    }\n    /**\n     * @deprecated Maybe removed in next major version, use `isSelected` instead.\n     * @param {?} value\n     * @return {?}\n     */\n    setSelected(value) {\n        warnDeprecation(`'setSelected' is going to be removed in 9.0.0. Please use 'isExpanded' isSelected.`);\n        if (this.isDisabled) {\n            return;\n        }\n        this.isSelected = value;\n    }\n    /**\n     * @return {?}\n     */\n    getParentNode() {\n        return this.parentNode;\n    }\n    /**\n     * @return {?}\n     */\n    getChildren() {\n        return this.children;\n    }\n    /**\n     * Support appending child nodes by position. Leaf node cannot be appended.\n     * @param {?} children\n     * @param {?=} childPos\n     * @return {?}\n     */\n    addChildren(children, childPos = -1) {\n        if (!this.isLeaf) {\n            children.forEach((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => {\n                /** @type {?} */\n                const refreshLevel = (/**\n                 * @param {?} n\n                 * @return {?}\n                 */\n                (n) => {\n                    n.getChildren().forEach((/**\n                     * @param {?} c\n                     * @return {?}\n                     */\n                    c => {\n                        c.level = (/** @type {?} */ (c.getParentNode())).level + 1;\n                        // flush origin\n                        c.origin.level = c.level;\n                        refreshLevel(c);\n                    }));\n                });\n                /** @type {?} */\n                let child = node;\n                if (child instanceof NzTreeNode) {\n                    child.parentNode = this;\n                }\n                else {\n                    child = new NzTreeNode(node, this);\n                }\n                child.level = this.level + 1;\n                child.origin.level = child.level;\n                refreshLevel(child);\n                try {\n                    childPos === -1 ? this.children.push(child) : this.children.splice(childPos, 0, child);\n                    // flush origin\n                }\n                catch (e) { }\n            }));\n            this.origin.children = this.getChildren().map((/**\n             * @param {?} v\n             * @return {?}\n             */\n            v => v.origin));\n            // remove loading state\n            this.isLoading = false;\n        }\n        this.afterValueChange('addChildren');\n        this.afterValueChange('reRender');\n    }\n    /**\n     * @return {?}\n     */\n    clearChildren() {\n        // refresh checked state\n        this.afterValueChange('clearChildren');\n        this.children = [];\n        this.origin.children = [];\n        this.afterValueChange('reRender');\n    }\n    /**\n     * @return {?}\n     */\n    remove() {\n        /** @type {?} */\n        const parentNode = this.getParentNode();\n        if (parentNode) {\n            parentNode.children = parentNode.getChildren().filter((/**\n             * @param {?} v\n             * @return {?}\n             */\n            v => v.key !== this.key));\n            parentNode.origin.children = (/** @type {?} */ (parentNode.origin.children)).filter((/**\n             * @param {?} v\n             * @return {?}\n             */\n            v => v.key !== this.key));\n            this.afterValueChange('remove');\n            this.afterValueChange('reRender');\n        }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    afterValueChange(key) {\n        if (this.treeService) {\n            switch (key) {\n                case 'isChecked':\n                    this.treeService.setCheckedNodeList(this);\n                    break;\n                case 'isHalfChecked':\n                    this.treeService.setHalfCheckedNodeList(this);\n                    break;\n                case 'isExpanded':\n                    this.treeService.setExpandedNodeList(this);\n                    break;\n                case 'isSelected':\n                    this.treeService.setNodeActive(this);\n                    break;\n                case 'clearChildren':\n                    this.treeService.afterRemove(this.getChildren());\n                    break;\n                case 'remove':\n                    this.treeService.afterRemove([this]);\n                    break;\n                case 'reRender':\n                    this.treeService.flattenTreeData(this.treeService.rootNodes, this.treeService.getExpandedNodeList().map((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => (/** @type {?} */ (v.key)))));\n                    break;\n            }\n        }\n        this.update();\n    }\n    /**\n     * @return {?}\n     */\n    update() {\n        if (this.component) {\n            this.component.markForCheck();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._title;\n    /** @type {?} */\n    NzTreeNode.prototype.key;\n    /** @type {?} */\n    NzTreeNode.prototype.level;\n    /** @type {?} */\n    NzTreeNode.prototype.origin;\n    /** @type {?} */\n    NzTreeNode.prototype.parentNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._icon;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._children;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isLeaf;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isChecked;\n    /**\n     * @deprecated Maybe removed in next major version, use isChecked instead\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isAllChecked;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isSelectable;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isDisableCheckbox;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isExpanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isHalfChecked;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isSelected;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNode.prototype._isLoading;\n    /** @type {?} */\n    NzTreeNode.prototype.canHide;\n    /** @type {?} */\n    NzTreeNode.prototype.isMatched;\n    /** @type {?} */\n    NzTreeNode.prototype.service;\n    /** @type {?} */\n    NzTreeNode.prototype.component;\n    /**\n     * New added in Tree for easy data access\n     * @type {?}\n     */\n    NzTreeNode.prototype.isStart;\n    /** @type {?} */\n    NzTreeNode.prototype.isEnd;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-base.definitions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * @record\n */\nfunction NzFormatEmitEvent() { }\nif (false) {\n    /** @type {?} */\n    NzFormatEmitEvent.prototype.eventName;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.node;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.event;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.dragNode;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.selectedKeys;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.checkedKeys;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.matchedKeys;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.nodes;\n    /** @type {?|undefined} */\n    NzFormatEmitEvent.prototype.keys;\n}\n/**\n * @record\n */\nfunction NzFormatBeforeDropEvent() { }\nif (false) {\n    /** @type {?} */\n    NzFormatBeforeDropEvent.prototype.dragNode;\n    /** @type {?} */\n    NzFormatBeforeDropEvent.prototype.node;\n    /** @type {?} */\n    NzFormatBeforeDropEvent.prototype.pos;\n}\n/**\n * @record\n */\nfunction NzTreeNodeBaseComponent() { }\nif (false) {\n    /**\n     * @return {?}\n     */\n    NzTreeNodeBaseComponent.prototype.markForCheck = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-base-util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isCheckDisabled(node) {\n    const { isDisabled, isDisableCheckbox } = node;\n    return !!(isDisabled || isDisableCheckbox);\n}\n/**\n * @param {?} needle\n * @param {?} haystack\n * @return {?}\n */\nfunction isInArray(needle, haystack) {\n    return haystack.length > 0 && haystack.indexOf(needle) > -1;\n}\n/**\n * @param {?} level\n * @param {?} index\n * @return {?}\n */\nfunction getPosition(level, index) {\n    return `${level}-${index}`;\n}\n/**\n * @param {?} key\n * @param {?} pos\n * @return {?}\n */\nfunction getKey(key, pos) {\n    if (key !== null && key !== undefined) {\n        return key;\n    }\n    return pos;\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param {?=} treeNodeList Origin data node list\n * @param {?=} expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n * @return {?}\n */\nfunction flattenTreeData(treeNodeList = [], expandedKeys = []) {\n    /** @type {?} */\n    const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n    /** @type {?} */\n    const flattenList = [];\n    /**\n     * @param {?} list\n     * @param {?=} parent\n     * @return {?}\n     */\n    function dig(list, parent = null) {\n        return list.map((/**\n         * @param {?} treeNode\n         * @param {?} index\n         * @return {?}\n         */\n        (treeNode, index) => {\n            /** @type {?} */\n            const pos = getPosition(parent ? parent.pos : '0', index);\n            /** @type {?} */\n            const mergedKey = getKey(treeNode.key, pos);\n            treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];\n            treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];\n            // Add FlattenDataNode into list\n            // TODO: only need data here.\n            /** @type {?} */\n            const flattenNode = {\n                parent,\n                pos,\n                children: [],\n                data: treeNode,\n                isStart: [...(parent ? parent.isStart : []), index === 0],\n                isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n            };\n            flattenList.push(flattenNode);\n            // Loop treeNode children\n            if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {\n                flattenNode.children = dig(treeNode.children || [], flattenNode);\n            }\n            else {\n                flattenNode.children = [];\n            }\n            return flattenNode;\n        }));\n    }\n    dig(treeNodeList);\n    return flattenList;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-base.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeBaseService {\n    constructor() {\n        this.DRAG_SIDE_RANGE = 0.25;\n        this.DRAG_MIN_GAP = 2;\n        this.isCheckStrictly = false;\n        this.isMultiple = false;\n        this.rootNodes = [];\n        this.flattenNodes$ = new BehaviorSubject([]);\n        this.selectedNodeList = [];\n        this.expandedNodeList = [];\n        this.checkedNodeList = [];\n        this.halfCheckedNodeList = [];\n        this.matchedNodeList = [];\n    }\n    /**\n     * reset tree nodes will clear default node list\n     * @param {?} nzNodes\n     * @return {?}\n     */\n    initTree(nzNodes) {\n        this.rootNodes = nzNodes;\n        this.expandedNodeList = [];\n        this.selectedNodeList = [];\n        this.halfCheckedNodeList = [];\n        this.checkedNodeList = [];\n        this.matchedNodeList = [];\n    }\n    /**\n     * @param {?} nzNodes\n     * @param {?=} expandedKeys\n     * @return {?}\n     */\n    flattenTreeData(nzNodes, expandedKeys = []) {\n        this.flattenNodes$.next(flattenTreeData(nzNodes, expandedKeys).map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.data)));\n    }\n    /**\n     * @return {?}\n     */\n    getSelectedNode() {\n        return this.selectedNode;\n    }\n    /**\n     * get some list\n     * @return {?}\n     */\n    getSelectedNodeList() {\n        return this.conductNodeState('select');\n    }\n    /**\n     * return checked nodes\n     * @return {?}\n     */\n    getCheckedNodeList() {\n        return this.conductNodeState('check');\n    }\n    /**\n     * @return {?}\n     */\n    getHalfCheckedNodeList() {\n        return this.conductNodeState('halfCheck');\n    }\n    /**\n     * return expanded nodes\n     * @return {?}\n     */\n    getExpandedNodeList() {\n        return this.conductNodeState('expand');\n    }\n    /**\n     * return search matched nodes\n     * @return {?}\n     */\n    getMatchedNodeList() {\n        return this.conductNodeState('match');\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    isArrayOfNzTreeNode(value) {\n        return value.every((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item instanceof NzTreeNode));\n    }\n    /**\n     * set drag node\n     * @param {?} node\n     * @return {?}\n     */\n    setSelectedNode(node) {\n        this.selectedNode = node;\n    }\n    /**\n     * set node selected status\n     * @param {?} node\n     * @return {?}\n     */\n    setNodeActive(node) {\n        if (!this.isMultiple && node.isSelected) {\n            this.selectedNodeList.forEach((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => {\n                if (node.key !== n.key) {\n                    // reset other nodes\n                    n.isSelected = false;\n                }\n            }));\n            // single mode: remove pre node\n            this.selectedNodeList = [];\n        }\n        this.setSelectedNodeList(node, this.isMultiple);\n    }\n    /**\n     * add or remove node to selectedNodeList\n     * @param {?} node\n     * @param {?=} isMultiple\n     * @return {?}\n     */\n    setSelectedNodeList(node, isMultiple = false) {\n        /** @type {?} */\n        const index = this.getIndexOfArray(this.selectedNodeList, node.key);\n        if (isMultiple) {\n            if (node.isSelected && index === -1) {\n                this.selectedNodeList.push(node);\n            }\n        }\n        else {\n            if (node.isSelected && index === -1) {\n                this.selectedNodeList = [node];\n            }\n        }\n        if (!node.isSelected) {\n            this.selectedNodeList = this.selectedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== node.key));\n        }\n    }\n    /**\n     * merge checked nodes\n     * @param {?} node\n     * @return {?}\n     */\n    setHalfCheckedNodeList(node) {\n        /** @type {?} */\n        const index = this.getIndexOfArray(this.halfCheckedNodeList, node.key);\n        if (node.isHalfChecked && index === -1) {\n            this.halfCheckedNodeList.push(node);\n        }\n        else if (!node.isHalfChecked && index > -1) {\n            this.halfCheckedNodeList = this.halfCheckedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => node.key !== n.key));\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    setCheckedNodeList(node) {\n        /** @type {?} */\n        const index = this.getIndexOfArray(this.checkedNodeList, node.key);\n        if (node.isChecked && index === -1) {\n            this.checkedNodeList.push(node);\n        }\n        else if (!node.isChecked && index > -1) {\n            this.checkedNodeList = this.checkedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => node.key !== n.key));\n        }\n    }\n    /**\n     * conduct checked/selected/expanded keys\n     * @param {?=} type\n     * @return {?}\n     */\n    conductNodeState(type = 'check') {\n        /** @type {?} */\n        let resultNodesList = [];\n        switch (type) {\n            case 'select':\n                resultNodesList = this.selectedNodeList;\n                break;\n            case 'expand':\n                resultNodesList = this.expandedNodeList;\n                break;\n            case 'match':\n                resultNodesList = this.matchedNodeList;\n                break;\n            case 'check':\n                resultNodesList = this.checkedNodeList;\n                /** @type {?} */\n                const isIgnore = (/**\n                 * @param {?} node\n                 * @return {?}\n                 */\n                (node) => {\n                    /** @type {?} */\n                    const parentNode = node.getParentNode();\n                    if (parentNode) {\n                        if (this.checkedNodeList.findIndex((/**\n                         * @param {?} n\n                         * @return {?}\n                         */\n                        n => n.key === parentNode.key)) > -1) {\n                            return true;\n                        }\n                        else {\n                            return isIgnore(parentNode);\n                        }\n                    }\n                    return false;\n                });\n                // merge checked\n                if (!this.isCheckStrictly) {\n                    resultNodesList = this.checkedNodeList.filter((/**\n                     * @param {?} n\n                     * @return {?}\n                     */\n                    n => !isIgnore(n)));\n                }\n                break;\n            case 'halfCheck':\n                if (!this.isCheckStrictly) {\n                    resultNodesList = this.halfCheckedNodeList;\n                }\n                break;\n        }\n        return resultNodesList;\n    }\n    /**\n     * set expanded nodes\n     * @param {?} node\n     * @return {?}\n     */\n    setExpandedNodeList(node) {\n        if (node.isLeaf) {\n            return;\n        }\n        /** @type {?} */\n        const index = this.getIndexOfArray(this.expandedNodeList, node.key);\n        if (node.isExpanded && index === -1) {\n            this.expandedNodeList.push(node);\n        }\n        else if (!node.isExpanded && index > -1) {\n            this.expandedNodeList.splice(index, 1);\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    setMatchedNodeList(node) {\n        /** @type {?} */\n        const index = this.getIndexOfArray(this.matchedNodeList, node.key);\n        if (node.isMatched && index === -1) {\n            this.matchedNodeList.push(node);\n        }\n        else if (!node.isMatched && index > -1) {\n            this.matchedNodeList.splice(index, 1);\n        }\n    }\n    /**\n     * check state\n     * @param {?=} isCheckStrictly\n     * @return {?}\n     */\n    refreshCheckState(isCheckStrictly = false) {\n        if (isCheckStrictly) {\n            return;\n        }\n        this.checkedNodeList.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            this.conduct(node);\n        }));\n    }\n    // reset other node checked state based current node\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    conduct(node) {\n        /** @type {?} */\n        const isChecked = node.isChecked;\n        if (node) {\n            this.conductUp(node);\n            this.conductDown(node, isChecked);\n        }\n    }\n    /**\n     * 1、children half checked\n     * 2、children all checked, parent checked\n     * 3、no children checked\n     * @param {?} node\n     * @return {?}\n     */\n    conductUp(node) {\n        /** @type {?} */\n        const parentNode = node.getParentNode();\n        if (parentNode) {\n            if (!isCheckDisabled(parentNode)) {\n                if (parentNode.children.every((/**\n                 * @param {?} child\n                 * @return {?}\n                 */\n                child => isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked)))) {\n                    parentNode.isChecked = true;\n                    parentNode.isHalfChecked = false;\n                }\n                else if (parentNode.children.some((/**\n                 * @param {?} child\n                 * @return {?}\n                 */\n                child => child.isHalfChecked || child.isChecked))) {\n                    parentNode.isChecked = false;\n                    parentNode.isHalfChecked = true;\n                }\n                else {\n                    parentNode.isChecked = false;\n                    parentNode.isHalfChecked = false;\n                }\n            }\n            this.setCheckedNodeList(parentNode);\n            this.setHalfCheckedNodeList(parentNode);\n            this.conductUp(parentNode);\n        }\n    }\n    /**\n     * reset child check state\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    conductDown(node, value) {\n        if (!isCheckDisabled(node)) {\n            node.isChecked = value;\n            node.isHalfChecked = false;\n            this.setCheckedNodeList(node);\n            this.setHalfCheckedNodeList(node);\n            node.children.forEach((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => {\n                this.conductDown(n, value);\n            }));\n        }\n    }\n    /**\n     * flush after delete node\n     * @param {?} nodes\n     * @return {?}\n     */\n    afterRemove(nodes) {\n        // to reset selectedNodeList & expandedNodeList\n        /** @type {?} */\n        const loopNode = (/**\n         * @param {?} node\n         * @return {?}\n         */\n        (node) => {\n            // remove selected node\n            this.selectedNodeList = this.selectedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== node.key));\n            // remove expanded node\n            this.expandedNodeList = this.expandedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== node.key));\n            // remove checked node\n            this.checkedNodeList = this.checkedNodeList.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== node.key));\n            if (node.children) {\n                node.children.forEach((/**\n                 * @param {?} child\n                 * @return {?}\n                 */\n                child => {\n                    loopNode(child);\n                }));\n            }\n        });\n        nodes.forEach((/**\n         * @param {?} n\n         * @return {?}\n         */\n        n => {\n            loopNode(n);\n        }));\n        this.refreshCheckState(this.isCheckStrictly);\n    }\n    /**\n     * drag event\n     * @param {?} node\n     * @return {?}\n     */\n    refreshDragNode(node) {\n        if (node.children.length === 0) {\n            // until root\n            this.conductUp(node);\n        }\n        else {\n            node.children.forEach((/**\n             * @param {?} child\n             * @return {?}\n             */\n            child => {\n                this.refreshDragNode(child);\n            }));\n        }\n    }\n    // reset node level\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    resetNodeLevel(node) {\n        /** @type {?} */\n        const parentNode = node.getParentNode();\n        if (parentNode) {\n            node.level = parentNode.level + 1;\n        }\n        else {\n            node.level = 0;\n        }\n        for (const child of node.children) {\n            this.resetNodeLevel(child);\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    calcDropPosition(event) {\n        const { clientY } = event;\n        // to fix firefox undefined\n        const { top, bottom, height } = event.srcElement\n            ? ((/** @type {?} */ (event.srcElement))).getBoundingClientRect()\n            : ((/** @type {?} */ (event.target))).getBoundingClientRect();\n        /** @type {?} */\n        const des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n        if (clientY <= top + des) {\n            return -1;\n        }\n        else if (clientY >= bottom - des) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     * drop\n     * 0: inner -1: pre 1: next\n     * @param {?} targetNode\n     * @param {?=} dragPos\n     * @return {?}\n     */\n    dropAndApply(targetNode, dragPos = -1) {\n        if (!targetNode || dragPos > 1) {\n            return;\n        }\n        /** @type {?} */\n        const treeService = targetNode.treeService;\n        /** @type {?} */\n        const targetParent = targetNode.getParentNode();\n        /** @type {?} */\n        const isSelectedRootNode = this.selectedNode.getParentNode();\n        // remove the dragNode\n        if (isSelectedRootNode) {\n            isSelectedRootNode.children = isSelectedRootNode.children.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== this.selectedNode.key));\n        }\n        else {\n            this.rootNodes = this.rootNodes.filter((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => n.key !== this.selectedNode.key));\n        }\n        switch (dragPos) {\n            case 0:\n                targetNode.addChildren([this.selectedNode]);\n                this.resetNodeLevel(targetNode);\n                break;\n            case -1:\n            case 1:\n                /** @type {?} */\n                const tIndex = dragPos === 1 ? 1 : 0;\n                if (targetParent) {\n                    targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n                    /** @type {?} */\n                    const parentNode = this.selectedNode.getParentNode();\n                    if (parentNode) {\n                        this.resetNodeLevel(parentNode);\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    const targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n                    // Insert root node.\n                    this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n                    this.rootNodes[targetIndex].parentNode = null;\n                    this.resetNodeLevel(this.rootNodes[targetIndex]);\n                }\n                break;\n        }\n        // flush all nodes\n        this.rootNodes.forEach((/**\n         * @param {?} child\n         * @return {?}\n         */\n        child => {\n            if (!child.treeService) {\n                child.service = treeService;\n            }\n            this.refreshDragNode(child);\n        }));\n    }\n    /**\n     * emit Structure\n     * eventName\n     * node\n     * event: MouseEvent / DragEvent\n     * dragNode\n     * @param {?} eventName\n     * @param {?} node\n     * @param {?} event\n     * @return {?}\n     */\n    formatEvent(eventName, node, event) {\n        /** @type {?} */\n        const emitStructure = {\n            eventName: eventName,\n            node: node,\n            event: event\n        };\n        switch (eventName) {\n            case 'dragstart':\n            case 'dragenter':\n            case 'dragover':\n            case 'dragleave':\n            case 'drop':\n            case 'dragend':\n                Object.assign(emitStructure, { dragNode: this.getSelectedNode() });\n                break;\n            case 'click':\n            case 'dblclick':\n                Object.assign(emitStructure, { selectedKeys: this.selectedNodeList });\n                Object.assign(emitStructure, { nodes: this.selectedNodeList });\n                Object.assign(emitStructure, { keys: this.selectedNodeList.map((/**\n                     * @param {?} n\n                     * @return {?}\n                     */\n                    n => n.key)) });\n                break;\n            case 'check':\n                /** @type {?} */\n                const checkedNodeList = this.getCheckedNodeList();\n                Object.assign(emitStructure, { checkedKeys: checkedNodeList });\n                Object.assign(emitStructure, { nodes: checkedNodeList });\n                Object.assign(emitStructure, { keys: checkedNodeList.map((/**\n                     * @param {?} n\n                     * @return {?}\n                     */\n                    n => n.key)) });\n                break;\n            case 'search':\n                Object.assign(emitStructure, { matchedKeys: this.getMatchedNodeList() });\n                Object.assign(emitStructure, { nodes: this.getMatchedNodeList() });\n                Object.assign(emitStructure, { keys: this.getMatchedNodeList().map((/**\n                     * @param {?} n\n                     * @return {?}\n                     */\n                    n => n.key)) });\n                break;\n            case 'expand':\n                Object.assign(emitStructure, { nodes: this.expandedNodeList });\n                Object.assign(emitStructure, { keys: this.expandedNodeList.map((/**\n                     * @param {?} n\n                     * @return {?}\n                     */\n                    n => n.key)) });\n                break;\n        }\n        return emitStructure;\n    }\n    /**\n     * New functions for flatten nodes\n     * @param {?} list\n     * @param {?} key\n     * @return {?}\n     */\n    getIndexOfArray(list, key) {\n        return list.findIndex((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.key === key));\n    }\n    /**\n     * Render by nzCheckedKeys\n     * @param {?} keys\n     * @param {?} checkStrictly\n     * @return {?}\n     */\n    conductCheck(keys, checkStrictly) {\n        this.checkedNodeList = [];\n        this.halfCheckedNodeList = [];\n        /** @type {?} */\n        const calc = (/**\n         * @param {?} nodes\n         * @return {?}\n         */\n        (nodes) => {\n            nodes.forEach((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => {\n                if (isInArray(node.key, keys)) {\n                    node.isChecked = true;\n                    node.isHalfChecked = false;\n                }\n                else {\n                    node.isChecked = false;\n                    node.isHalfChecked = false;\n                }\n                if (node.children.length > 0) {\n                    calc(node.children);\n                }\n            }));\n        });\n        calc(this.rootNodes);\n        this.refreshCheckState(checkStrictly);\n    }\n    /**\n     * @param {?=} keys\n     * @return {?}\n     */\n    conductExpandedKeys(keys = []) {\n        /** @type {?} */\n        const expandedKeySet = new Set(keys === true ? [] : keys);\n        this.expandedNodeList = [];\n        /** @type {?} */\n        const calc = (/**\n         * @param {?} nodes\n         * @return {?}\n         */\n        (nodes) => {\n            nodes.forEach((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => {\n                node.setExpanded(keys === true || expandedKeySet.has(node.key) || node.isExpanded === true);\n                if (node.isExpanded) {\n                    this.setExpandedNodeList(node);\n                }\n                if (node.children.length > 0) {\n                    calc(node.children);\n                }\n            }));\n        });\n        calc(this.rootNodes);\n    }\n    /**\n     * @param {?} keys\n     * @param {?} isMulti\n     * @return {?}\n     */\n    conductSelectedKeys(keys, isMulti) {\n        this.selectedNodeList = [];\n        /** @type {?} */\n        const calc = (/**\n         * @param {?} nodes\n         * @return {?}\n         */\n        (nodes) => {\n            return nodes.every((/**\n             * @param {?} node\n             * @return {?}\n             */\n            node => {\n                if (isInArray(node.key, keys)) {\n                    node.isSelected = true;\n                    this.setSelectedNodeList(node);\n                    if (!isMulti) {\n                        // if not support multi select\n                        return false;\n                    }\n                }\n                else {\n                    node.isSelected = false;\n                }\n                if (node.children.length > 0) {\n                    // Recursion\n                    return calc(node.children);\n                }\n                return true;\n            }));\n        });\n        calc(this.rootNodes);\n    }\n    /**\n     * Expand parent nodes by child node\n     * @param {?} node\n     * @return {?}\n     */\n    expandNodeAllParentBySearch(node) {\n        /** @type {?} */\n        const calc = (/**\n         * @param {?} n\n         * @return {?}\n         */\n        (n) => {\n            if (n) {\n                n.canHide = false;\n                n.setExpanded(true);\n                this.setExpandedNodeList(n);\n                if (n.getParentNode()) {\n                    return calc(n.getParentNode());\n                }\n            }\n        });\n        calc(node.getParentNode());\n    }\n}\nNzTreeBaseService.ɵfac = function NzTreeBaseService_Factory(t) { return new (t || NzTreeBaseService)(); };\nNzTreeBaseService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NzTreeBaseService, factory: NzTreeBaseService.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeBaseService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nif (false) {\n    /** @type {?} */\n    NzTreeBaseService.prototype.DRAG_SIDE_RANGE;\n    /** @type {?} */\n    NzTreeBaseService.prototype.DRAG_MIN_GAP;\n    /** @type {?} */\n    NzTreeBaseService.prototype.isCheckStrictly;\n    /** @type {?} */\n    NzTreeBaseService.prototype.isMultiple;\n    /** @type {?} */\n    NzTreeBaseService.prototype.selectedNode;\n    /** @type {?} */\n    NzTreeBaseService.prototype.rootNodes;\n    /** @type {?} */\n    NzTreeBaseService.prototype.flattenNodes$;\n    /** @type {?} */\n    NzTreeBaseService.prototype.selectedNodeList;\n    /** @type {?} */\n    NzTreeBaseService.prototype.expandedNodeList;\n    /** @type {?} */\n    NzTreeBaseService.prototype.checkedNodeList;\n    /** @type {?} */\n    NzTreeBaseService.prototype.halfCheckedNodeList;\n    /** @type {?} */\n    NzTreeBaseService.prototype.matchedNodeList;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-service.resolver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NzTreeHigherOrderServiceToken = new InjectionToken('NzTreeHigherOrder');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-tree-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeBase {\n    /**\n     * @param {?} nzTreeService\n     */\n    constructor(nzTreeService) {\n        this.nzTreeService = nzTreeService;\n    }\n    /**\n     * Coerces a value({\\@link any[]}) to a TreeNodes({\\@link NzTreeNode[]})\n     * @param {?} value\n     * @return {?}\n     */\n    coerceTreeNodes(value) {\n        /** @type {?} */\n        let nodes = [];\n        if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n            // has not been new NzTreeNode\n            nodes = value.map((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => new NzTreeNode(item, null, this.nzTreeService)));\n        }\n        else {\n            nodes = value.map((/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => {\n                item.service = this.nzTreeService;\n                return item;\n            }));\n        }\n        return nodes;\n    }\n    /**\n     * Get all nodes({\\@link NzTreeNode})\n     * @return {?}\n     */\n    getTreeNodes() {\n        return this.nzTreeService.rootNodes;\n    }\n    /**\n     * Get {\\@link NzTreeNode} with key\n     * @param {?} key\n     * @return {?}\n     */\n    getTreeNodeByKey(key) {\n        // flat tree nodes\n        /** @type {?} */\n        const nodes = [];\n        /** @type {?} */\n        const getNode = (/**\n         * @param {?} node\n         * @return {?}\n         */\n        (node) => {\n            nodes.push(node);\n            node.getChildren().forEach((/**\n             * @param {?} n\n             * @return {?}\n             */\n            n => {\n                getNode(n);\n            }));\n        });\n        this.getTreeNodes().forEach((/**\n         * @param {?} n\n         * @return {?}\n         */\n        n => {\n            getNode(n);\n        }));\n        return nodes.find((/**\n         * @param {?} n\n         * @return {?}\n         */\n        n => n.key === key)) || null;\n    }\n    /**\n     * Get checked nodes(merged)\n     * @return {?}\n     */\n    getCheckedNodeList() {\n        return this.nzTreeService.getCheckedNodeList();\n    }\n    /**\n     * Get selected nodes\n     * @return {?}\n     */\n    getSelectedNodeList() {\n        return this.nzTreeService.getSelectedNodeList();\n    }\n    /**\n     * Get half checked nodes\n     * @return {?}\n     */\n    getHalfCheckedNodeList() {\n        return this.nzTreeService.getHalfCheckedNodeList();\n    }\n    /**\n     * Get expanded nodes\n     * @return {?}\n     */\n    getExpandedNodeList() {\n        return this.nzTreeService.getExpandedNodeList();\n    }\n    /**\n     * Get matched nodes(if nzSearchValue is not null)\n     * @return {?}\n     */\n    getMatchedNodeList() {\n        return this.nzTreeService.getMatchedNodeList();\n    }\n}\nif (false) {\n    /** @type {?} */\n    NzTreeBase.prototype.nzTreeService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NzTreeBase, NzTreeBaseService, NzTreeHigherOrderServiceToken, NzTreeNode, flattenTreeData, getKey, getPosition, isCheckDisabled, isInArray };\n\n//# sourceMappingURL=ng-zorro-antd-core-tree.js.map","import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, NgZone, Renderer2, ElementRef, ChangeDetectorRef, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'ng-zorro-antd/core/outlet';\nimport * as ɵngcc3 from 'ng-zorro-antd/icon';\nimport * as ɵngcc4 from 'ng-zorro-antd/core/highlight';\nimport * as ɵngcc5 from 'ng-zorro-antd/core/tree';\nimport * as ɵngcc6 from 'ng-zorro-antd/core/no-animation';\nimport * as ɵngcc7 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc8 from '@angular/cdk/scrolling';\n\nfunction NzTreeIndentComponent_span_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n} if (rf & 2) {\n    const index_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.unitMapOfClass(index_r2));\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-switcher-icon\", ctx_r5.nzSelectMode)(\"ant-tree-switcher-icon\", !ctx_r5.nzSelectMode);\n} }\nconst _c0 = function (a0, a1) { return { $implicit: a0, origin: a1 }; };\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, \"ng-container\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r4.nzExpandedIcon)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r4.context, ctx_r4.context.origin));\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    const _r2 = ɵngcc0.ɵɵreference(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoading)(\"ngIfElse\", _r2);\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 7);\n} if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r8.isSwitcherOpen ? \"minus-square\" : \"plus-square\");\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 8);\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template, 1, 1, \"i\", 5);\n    ɵngcc0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.isShowLineIcon);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r7.isShowLineIcon);\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.nzExpandedIcon)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r6.context, ctx_r6.context.origin));\n} }\nfunction NzTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    const _r2 = ɵngcc0.ɵɵreference(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading)(\"ngIfElse\", _r2);\n} }\nfunction NzTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 9);\n} if (rf & 2) {\n    ɵngcc0.ɵɵproperty(\"nzSpin\", true);\n} }\nfunction NzTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) { }\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 5);\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r3.icon);\n} }\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtemplate(2, NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, \"i\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassProp(\"ant-tree-icon__open\", ctx_r2.isSwitcherOpen)(\"ant-tree-icon__close\", ctx_r2.isSwitcherClose)(\"ant-tree-icon_loading\", ctx_r2.isLoading)(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-select-tree-icon__customize\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode)(\"ant-tree-icon__customize\", !ctx_r2.selectMode);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.icon);\n} }\nfunction NzTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, \"span\", 2);\n    ɵngcc0.ɵɵelement(2, \"span\", 3);\n    ɵngcc0.ɵɵpipe(3, \"nzHighlight\");\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.icon && ctx_r1.showIcon);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind4(3, 2, ctx_r1.title, ctx_r1.matchedValue, \"i\", \"font-highlight\"), ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction NzTreeNodeComponent_nz_tree_node_switcher_1_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-switcher\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeComponent_nz_tree_node_switcher_1_Template_nz_tree_node_switcher_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.clickExpand($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzShowExpand\", ctx_r0.nzShowExpand)(\"nzShowLine\", ctx_r0.nzShowLine)(\"nzExpandedIcon\", ctx_r0.nzExpandedIcon)(\"nzSelectMode\", ctx_r0.nzSelectMode)(\"context\", ctx_r0.nzTreeNode)(\"isLeaf\", ctx_r0.isLeaf)(\"isExpanded\", ctx_r0.isExpanded)(\"isLoading\", ctx_r0.isLoading);\n} }\nfunction NzTreeNodeComponent_nz_tree_node_checkbox_2_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-checkbox\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeComponent_nz_tree_node_checkbox_2_Template_nz_tree_node_checkbox_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.clickCheckBox($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzSelectMode\", ctx_r1.nzSelectMode)(\"isChecked\", ctx_r1.isChecked)(\"isHalfChecked\", ctx_r1.isHalfChecked)(\"isDisabled\", ctx_r1.isDisabled)(\"isDisableCheckbox\", ctx_r1.isDisableCheckbox);\n} }\nconst _c1 = [\"nzTreeTemplate\"];\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template(rf, ctx) { }\nconst _c2 = function (a0) { return { $implicit: a0 }; };\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 7);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n    const _r2 = ɵngcc0.ɵɵreference(7);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c2, node_r5));\n} }\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 5);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template, 2, 4, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r0.nzVirtualHeight);\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r0.nzSelectMode)(\"ant-tree-list-holder-inner\", ctx_r0.nzSelectMode);\n    ɵngcc0.ɵɵproperty(\"itemSize\", ctx_r0.nzVirtualItemSize)(\"minBufferPx\", ctx_r0.nzVirtualMinBufferPx)(\"maxBufferPx\", ctx_r0.nzVirtualMaxBufferPx);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r0.nzFlattenNodes)(\"cdkVirtualForTrackBy\", ctx_r0.trackByFlattenNode);\n} }\nfunction NzTreeComponent_div_5_ng_container_1_ng_template_1_Template(rf, ctx) { }\nfunction NzTreeComponent_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_div_5_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 7);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const node_r8 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n    const _r2 = ɵngcc0.ɵɵreference(7);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c2, node_r8));\n} }\nfunction NzTreeComponent_div_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtemplate(1, NzTreeComponent_div_5_ng_container_1_Template, 2, 4, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r1.nzSelectMode)(\"ant-tree-list-holder-inner\", ctx_r1.nzSelectMode);\n    ɵngcc0.ɵɵproperty(\"@.disabled\", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@treeCollapseMotion\", ctx_r1.nzFlattenNodes.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.nzFlattenNodes)(\"ngForTrackBy\", ctx_r1.trackByFlattenNode);\n} }\nfunction NzTreeComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node\", 10);\n    ɵngcc0.ɵɵlistener(\"nzExpandChange\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzExpandChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.eventTriggerChanged($event); })(\"nzClick\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.eventTriggerChanged($event); })(\"nzDblClick\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzDblClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.eventTriggerChanged($event); })(\"nzContextMenu\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzContextMenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.eventTriggerChanged($event); })(\"nzCheckBoxChange\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzCheckBoxChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.eventTriggerChanged($event); })(\"nzOnDragStart\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragStart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.eventTriggerChanged($event); })(\"nzOnDragEnter\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragEnter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.eventTriggerChanged($event); })(\"nzOnDragOver\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragOver_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.eventTriggerChanged($event); })(\"nzOnDragLeave\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragLeave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.eventTriggerChanged($event); })(\"nzOnDragEnd\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDragEnd_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.eventTriggerChanged($event); })(\"nzOnDrop\", function NzTreeComponent_ng_template_6_Template_nz_tree_node_nzOnDrop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.eventTriggerChanged($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const treeNode_r10 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"icon\", treeNode_r10.icon)(\"title\", treeNode_r10.title)(\"isLoading\", treeNode_r10.isLoading)(\"isSelected\", treeNode_r10.isSelected)(\"isDisabled\", treeNode_r10.isDisabled)(\"isMatched\", treeNode_r10.isMatched)(\"isExpanded\", treeNode_r10.isExpanded)(\"isLeaf\", treeNode_r10.isLeaf)(\"isStart\", treeNode_r10.isStart)(\"isEnd\", treeNode_r10.isEnd)(\"isChecked\", treeNode_r10.isChecked)(\"isHalfChecked\", treeNode_r10.isHalfChecked)(\"isDisableCheckbox\", treeNode_r10.isDisableCheckbox)(\"isSelectable\", treeNode_r10.isSelectable)(\"canHide\", treeNode_r10.canHide)(\"nzTreeNode\", treeNode_r10)(\"nzSelectMode\", ctx_r3.nzSelectMode)(\"nzShowLine\", ctx_r3.nzShowLine)(\"nzExpandedIcon\", ctx_r3.nzExpandedIcon)(\"nzDraggable\", ctx_r3.nzDraggable)(\"nzCheckable\", ctx_r3.nzCheckable)(\"nzShowExpand\", ctx_r3.nzShowExpand)(\"nzAsyncData\", ctx_r3.nzAsyncData)(\"nzSearchValue\", ctx_r3.nzSearchValue)(\"nzHideUnMatched\", ctx_r3.nzHideUnMatched)(\"nzBeforeDrop\", ctx_r3.nzBeforeDrop)(\"nzShowIcon\", ctx_r3.nzShowIcon)(\"nzTreeTemplate\", ctx_r3.nzTreeTemplate || ctx_r3.nzTreeTemplateChild);\n} }\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { __decorate, __metadata } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree-indent.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeIndentComponent {\n    constructor() {\n        this.nzSelectMode = false;\n        this.listOfUnit = [];\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    unitMapOfClass(index) {\n        return {\n            [`ant-tree-indent-unit`]: !this.nzSelectMode,\n            [`ant-tree-indent-unit-start`]: !this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],\n            [`ant-tree-indent-unit-end`]: !this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],\n            [`ant-select-tree-indent-unit`]: this.nzSelectMode,\n            [`ant-select-tree-indent-unit-start`]: this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],\n            [`ant-select-tree-indent-unit-end`]: this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1]\n        };\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() { }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        const { nzTreeLevel } = changes;\n        if (nzTreeLevel) {\n            this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n        }\n    }\n}\nNzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) { return new (t || NzTreeIndentComponent)(); };\nNzTreeIndentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeIndentComponent, selectors: [[\"nz-tree-indent\"]], hostVars: 5, hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-hidden\", true);\n        ɵngcc0.ɵɵclassProp(\"ant-tree-indent\", !ctx.nzSelectMode)(\"ant-select-tree-indent\", ctx.nzSelectMode);\n    } }, inputs: { nzSelectMode: \"nzSelectMode\", nzTreeLevel: \"nzTreeLevel\", nzIsStart: \"nzIsStart\", nzIsEnd: \"nzIsEnd\" }, exportAs: [\"nzTreeIndent\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"]], template: function NzTreeIndentComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 1, \"span\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.listOfUnit);\n    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });\nNzTreeIndentComponent.propDecorators = {\n    nzTreeLevel: [{ type: Input }],\n    nzIsStart: [{ type: Input }],\n    nzIsEnd: [{ type: Input }],\n    nzSelectMode: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    NzTreeIndentComponent.prototype.nzTreeLevel;\n    /** @type {?} */\n    NzTreeIndentComponent.prototype.nzIsStart;\n    /** @type {?} */\n    NzTreeIndentComponent.prototype.nzIsEnd;\n    /** @type {?} */\n    NzTreeIndentComponent.prototype.nzSelectMode;\n    /** @type {?} */\n    NzTreeIndentComponent.prototype.listOfUnit;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree-node-checkbox.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeNodeCheckboxComponent {\n    constructor() {\n        this.nzSelectMode = false;\n    }\n}\nNzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) { return new (t || NzTreeNodeCheckboxComponent)(); };\nNzTreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeCheckboxComponent, selectors: [[\"nz-tree-node-checkbox\"]], hostVars: 16, hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-select-tree-checkbox\", ctx.nzSelectMode)(\"ant-select-tree-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-checkbox-disabled\", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))(\"ant-tree-checkbox\", !ctx.nzSelectMode)(\"ant-tree-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-checkbox-disabled\", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));\n    } }, inputs: { nzSelectMode: \"nzSelectMode\", isChecked: \"isChecked\", isHalfChecked: \"isHalfChecked\", isDisabled: \"isDisabled\", isDisableCheckbox: \"isDisableCheckbox\" }, decls: 1, vars: 4, template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"span\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-checkbox-inner\", !ctx.nzSelectMode)(\"ant-select-tree-checkbox-inner\", ctx.nzSelectMode);\n    } }, encapsulation: 2, changeDetection: 0 });\nNzTreeNodeCheckboxComponent.propDecorators = {\n    nzSelectMode: [{ type: Input }],\n    isChecked: [{ type: Input }],\n    isHalfChecked: [{ type: Input }],\n    isDisabled: [{ type: Input }],\n    isDisableCheckbox: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    NzTreeNodeCheckboxComponent.prototype.nzSelectMode;\n    /** @type {?} */\n    NzTreeNodeCheckboxComponent.prototype.isChecked;\n    /** @type {?} */\n    NzTreeNodeCheckboxComponent.prototype.isHalfChecked;\n    /** @type {?} */\n    NzTreeNodeCheckboxComponent.prototype.isDisabled;\n    /** @type {?} */\n    NzTreeNodeCheckboxComponent.prototype.isDisableCheckbox;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree-node-switcher.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeNodeSwitcherComponent {\n    constructor() {\n        this.nzSelectMode = false;\n    }\n    /**\n     * @return {?}\n     */\n    get isShowLineIcon() {\n        return !this.isLeaf && !!this.nzShowLine;\n    }\n    /**\n     * @return {?}\n     */\n    get isShowSwitchIcon() {\n        return !this.isLeaf && !this.nzShowLine;\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherOpen() {\n        return !!this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n}\nNzTreeNodeSwitcherComponent.ɵfac = function NzTreeNodeSwitcherComponent_Factory(t) { return new (t || NzTreeNodeSwitcherComponent)(); };\nNzTreeNodeSwitcherComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeSwitcherComponent, selectors: [[\"nz-tree-node-switcher\"]], hostVars: 16, hostBindings: function NzTreeNodeSwitcherComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-select-tree-switcher\", ctx.nzSelectMode)(\"ant-select-tree-switcher-noop\", ctx.nzSelectMode && ctx.isLeaf)(\"ant-select-tree-switcher_open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-switcher_close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-switcher\", !ctx.nzSelectMode)(\"ant-tree-switcher-noop\", !ctx.nzSelectMode && ctx.isLeaf)(\"ant-tree-switcher_open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-switcher_close\", !ctx.nzSelectMode && ctx.isSwitcherClose);\n    } }, inputs: { nzSelectMode: \"nzSelectMode\", nzShowExpand: \"nzShowExpand\", nzShowLine: \"nzShowLine\", nzExpandedIcon: \"nzExpandedIcon\", context: \"context\", isLeaf: \"isLeaf\", isLoading: \"isLoading\", isExpanded: \"isExpanded\" }, decls: 4, vars: 2, consts: [[4, \"ngIf\"], [\"loadingTemplate\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-icon\", \"\", \"nzType\", \"caret-down\"], [\"nz-icon\", \"\", \"class\", \"ant-tree-switcher-line-icon\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"file\", \"class\", \"ant-tree-switcher-line-icon\", 4, \"ngIf\"], [\"nz-icon\", \"\", 1, \"ant-tree-switcher-line-icon\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"file\", 1, \"ant-tree-switcher-line-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 1, \"ant-tree-switcher-loading-icon\", 3, \"nzSpin\"]], template: function NzTreeNodeSwitcherComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isShowSwitchIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzShowLine);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.NzStringTemplateOutletDirective, ɵngcc3.NzIconDirective], encapsulation: 2, changeDetection: 0 });\nNzTreeNodeSwitcherComponent.propDecorators = {\n    nzShowExpand: [{ type: Input }],\n    nzShowLine: [{ type: Input }],\n    nzExpandedIcon: [{ type: Input }],\n    nzSelectMode: [{ type: Input }],\n    context: [{ type: Input }],\n    isLeaf: [{ type: Input }],\n    isLoading: [{ type: Input }],\n    isExpanded: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.nzShowExpand;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.nzShowLine;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.nzExpandedIcon;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.nzSelectMode;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.context;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.isLeaf;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.isLoading;\n    /** @type {?} */\n    NzTreeNodeSwitcherComponent.prototype.isExpanded;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree-node-title.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeNodeTitleComponent {\n    constructor() {\n        this.treeTemplate = null;\n        this.selectMode = false;\n    }\n    /**\n     * @return {?}\n     */\n    get canDraggable() {\n        return this.draggable && !this.isDisabled ? true : null;\n    }\n    /**\n     * @return {?}\n     */\n    get matchedValue() {\n        return this.isMatched ? this.searchValue : '';\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherOpen() {\n        return this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n}\nNzTreeNodeTitleComponent.ɵfac = function NzTreeNodeTitleComponent_Factory(t) { return new (t || NzTreeNodeTitleComponent)(); };\nNzTreeNodeTitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeTitleComponent, selectors: [[\"nz-tree-node-title\"]], hostVars: 21, hostBindings: function NzTreeNodeTitleComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"title\", ctx.title)(\"draggable\", ctx.canDraggable)(\"aria-grabbed\", ctx.canDraggable);\n        ɵngcc0.ɵɵclassProp(\"draggable\", ctx.canDraggable)(\"ant-select-tree-node-content-wrapper\", ctx.selectMode)(\"ant-select-tree-node-content-wrapper-open\", ctx.selectMode && ctx.isSwitcherOpen)(\"ant-select-tree-node-content-wrapper-close\", ctx.selectMode && ctx.isSwitcherClose)(\"ant-select-tree-node-selected\", ctx.selectMode && ctx.isSelected)(\"ant-tree-node-content-wrapper\", !ctx.selectMode)(\"ant-tree-node-content-wrapper-open\", !ctx.selectMode && ctx.isSwitcherOpen)(\"ant-tree-node-content-wrapper-close\", !ctx.selectMode && ctx.isSwitcherClose)(\"ant-tree-node-selected\", !ctx.selectMode && ctx.isSelected);\n    } }, inputs: { treeTemplate: \"treeTemplate\", selectMode: \"selectMode\", searchValue: \"searchValue\", draggable: \"draggable\", showIcon: \"showIcon\", context: \"context\", icon: \"icon\", title: \"title\", isLoading: \"isLoading\", isSelected: \"isSelected\", isDisabled: \"isDisabled\", isMatched: \"isMatched\", isExpanded: \"isExpanded\", isLeaf: \"isLeaf\" }, decls: 2, vars: 6, consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"ant-tree-icon__open\", \"ant-tree-icon__close\", \"ant-tree-icon_loading\", \"ant-select-tree-iconEle\", \"ant-tree-iconEle\", 4, \"ngIf\"], [1, \"ant-tree-title\", 3, \"innerHTML\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"]], template: function NzTreeNodeTitleComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeTitleComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_Template, 4, 7, \"ng-container\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.treeTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx.context, ctx.context.origin));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.treeTemplate);\n    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ɵngcc3.NzIconDirective], pipes: [ɵngcc4.NzHighlightPipe], encapsulation: 2, changeDetection: 0 });\nNzTreeNodeTitleComponent.propDecorators = {\n    searchValue: [{ type: Input }],\n    treeTemplate: [{ type: Input }],\n    draggable: [{ type: Input }],\n    showIcon: [{ type: Input }],\n    selectMode: [{ type: Input }],\n    context: [{ type: Input }],\n    icon: [{ type: Input }],\n    title: [{ type: Input }],\n    isLoading: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    isDisabled: [{ type: Input }],\n    isMatched: [{ type: Input }],\n    isExpanded: [{ type: Input }],\n    isLeaf: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.searchValue;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.treeTemplate;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.draggable;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.showIcon;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.selectMode;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.context;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.icon;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.title;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isLoading;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isSelected;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isDisabled;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isMatched;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isExpanded;\n    /** @type {?} */\n    NzTreeNodeTitleComponent.prototype.isLeaf;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree-node.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeNodeComponent {\n    /**\n     * @param {?} nzTreeService\n     * @param {?} ngZone\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} cdr\n     * @param {?=} noAnimation\n     */\n    constructor(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n        this.nzTreeService = nzTreeService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.cdr = cdr;\n        this.noAnimation = noAnimation;\n        /**\n         * for global property\n         */\n        this.icon = '';\n        this.title = '';\n        this.isLoading = false;\n        this.isSelected = false;\n        this.isDisabled = false;\n        this.isMatched = false;\n        this.nzHideUnMatched = false;\n        this.nzNoAnimation = false;\n        this.nzSelectMode = false;\n        this.nzShowIcon = false;\n        this.nzTreeTemplate = null;\n        this.nzSearchValue = '';\n        this.nzDraggable = false;\n        this.nzClick = new EventEmitter();\n        this.nzDblClick = new EventEmitter();\n        this.nzContextMenu = new EventEmitter();\n        this.nzCheckBoxChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzOnDragStart = new EventEmitter();\n        this.nzOnDragEnter = new EventEmitter();\n        this.nzOnDragOver = new EventEmitter();\n        this.nzOnDragLeave = new EventEmitter();\n        this.nzOnDrop = new EventEmitter();\n        this.nzOnDragEnd = new EventEmitter();\n        /**\n         * drag var\n         */\n        this.destroy$ = new Subject();\n        this.dragPos = 2;\n        this.dragPosClass = {\n            '0': 'drag-over',\n            '1': 'drag-over-gap-bottom',\n            '-1': 'drag-over-gap-top'\n        };\n    }\n    /**\n     * default set\n     * @return {?}\n     */\n    get displayStyle() {\n        // to hide unmatched nodes\n        return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherOpen() {\n        return this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * @return {?}\n     */\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMousedown(event) {\n        if (this.nzSelectMode) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * collapse node\n     * @param {?} event\n     * @return {?}\n     */\n    clickExpand(event) {\n        event.preventDefault();\n        if (!this.isLoading && !this.isLeaf) {\n            // set async state\n            if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n                this.nzTreeNode.isLoading = true;\n            }\n            this.nzTreeNode.setExpanded(!this.isExpanded);\n        }\n        this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n        this.nzExpandChange.emit(eventNext);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    clickSelect(event) {\n        event.preventDefault();\n        if (this.isSelectable && !this.isDisabled) {\n            this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n        }\n        this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n        this.nzClick.emit(eventNext);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    dblClick(event) {\n        event.preventDefault();\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n        this.nzDblClick.emit(eventNext);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    contextMenu(event) {\n        event.preventDefault();\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n        this.nzContextMenu.emit(eventNext);\n    }\n    /**\n     * check node\n     * @param {?} event\n     * @return {?}\n     */\n    clickCheckBox(event) {\n        event.preventDefault();\n        // return if node is disabled\n        if (this.isDisabled || this.isDisableCheckbox) {\n            return;\n        }\n        this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n        this.nzTreeNode.isHalfChecked = false;\n        this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n        this.nzCheckBoxChange.emit(eventNext);\n    }\n    /**\n     * @return {?}\n     */\n    clearDragClass() {\n        /** @type {?} */\n        const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];\n        dragClass.forEach((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => {\n            this.renderer.removeClass(this.elementRef.nativeElement, e);\n        }));\n    }\n    /**\n     * drag event\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragStart(e) {\n        try {\n            // ie throw error\n            // firefox-need-it\n            (/** @type {?} */ (e.dataTransfer)).setData('text/plain', (/** @type {?} */ (this.nzTreeNode.key)));\n        }\n        catch (error) {\n            // empty\n        }\n        this.nzTreeService.setSelectedNode(this.nzTreeNode);\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n        this.nzOnDragStart.emit(eventNext);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragEnter(e) {\n        e.preventDefault();\n        // reset position\n        this.dragPos = 2;\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n            this.nzOnDragEnter.emit(eventNext);\n        }));\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragOver(e) {\n        e.preventDefault();\n        /** @type {?} */\n        const dropPosition = this.nzTreeService.calcDropPosition(e);\n        if (this.dragPos !== dropPosition) {\n            this.clearDragClass();\n            this.dragPos = dropPosition;\n            // leaf node will pass\n            if (!(this.dragPos === 0 && this.isLeaf)) {\n                this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n            }\n        }\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n        this.nzOnDragOver.emit(eventNext);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragLeave(e) {\n        e.preventDefault();\n        this.clearDragClass();\n        /** @type {?} */\n        const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n        this.nzOnDragLeave.emit(eventNext);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragDrop(e) {\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.clearDragClass();\n            /** @type {?} */\n            const node = this.nzTreeService.getSelectedNode();\n            if (!node || (node && node.key === this.nzTreeNode.key) || (this.dragPos === 0 && this.isLeaf)) {\n                return;\n            }\n            // pass if node is leafNo\n            /** @type {?} */\n            const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n            /** @type {?} */\n            const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n            if (this.nzBeforeDrop) {\n                this.nzBeforeDrop({\n                    dragNode: (/** @type {?} */ (this.nzTreeService.getSelectedNode())),\n                    node: this.nzTreeNode,\n                    pos: this.dragPos\n                }).subscribe((/**\n                 * @param {?} canDrop\n                 * @return {?}\n                 */\n                (canDrop) => {\n                    if (canDrop) {\n                        this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n                    }\n                    this.nzOnDrop.emit(dropEvent);\n                    this.nzOnDragEnd.emit(dragEndEvent);\n                }));\n            }\n            else if (this.nzTreeNode) {\n                this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n                this.nzOnDrop.emit(dropEvent);\n            }\n        }));\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    handleDragEnd(e) {\n        e.preventDefault();\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            // if user do not custom beforeDrop\n            if (!this.nzBeforeDrop) {\n                /** @type {?} */\n                const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n                this.nzOnDragEnd.emit(eventNext);\n            }\n        }));\n    }\n    /**\n     * Listening to dragging events.\n     * @return {?}\n     */\n    handDragEvent() {\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (this.nzDraggable) {\n                /** @type {?} */\n                const nativeElement = this.elementRef.nativeElement;\n                this.destroy$ = new Subject();\n                fromEvent(nativeElement, 'dragstart')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragStart(e)));\n                fromEvent(nativeElement, 'dragenter')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragEnter(e)));\n                fromEvent(nativeElement, 'dragover')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragOver(e)));\n                fromEvent(nativeElement, 'dragleave')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragLeave(e)));\n                fromEvent(nativeElement, 'drop')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragDrop(e)));\n                fromEvent(nativeElement, 'dragend')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.handleDragEnd(e)));\n            }\n            else {\n                this.destroy$.next();\n                this.destroy$.complete();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    markForCheck() {\n        this.cdr.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.nzTreeNode.component = this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        const { nzDraggable } = changes;\n        if (nzDraggable) {\n            this.handDragEvent();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\nNzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) { return new (t || NzTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NzTreeBaseService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NzNoAnimationDirective, 9)); };\nNzTreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeComponent, selectors: [[\"nz-tree-node\"]], hostVars: 34, hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function NzTreeNodeComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n        ɵngcc0.ɵɵclassProp(\"ant-select-tree-treenode\", ctx.nzSelectMode)(\"ant-select-tree-treenode-disabled\", ctx.nzSelectMode && ctx.isDisabled)(\"ant-select-tree-treenode-switcher-open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-treenode-switcher-close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-select-tree-treenode-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-treenode-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-treenode-selected\", ctx.nzSelectMode && ctx.isSelected)(\"ant-select-tree-treenode-loading\", ctx.nzSelectMode && ctx.isLoading)(\"ant-tree-treenode\", !ctx.nzSelectMode)(\"ant-tree-treenode-disabled\", !ctx.nzSelectMode && ctx.isDisabled)(\"ant-tree-treenode-switcher-open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-treenode-switcher-close\", !ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-treenode-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-treenode-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-treenode-selected\", !ctx.nzSelectMode && ctx.isSelected)(\"ant-tree-treenode-loading\", !ctx.nzSelectMode && ctx.isLoading);\n    } }, inputs: { icon: \"icon\", title: \"title\", isLoading: \"isLoading\", isSelected: \"isSelected\", isDisabled: \"isDisabled\", isMatched: \"isMatched\", nzHideUnMatched: \"nzHideUnMatched\", nzNoAnimation: \"nzNoAnimation\", nzSelectMode: \"nzSelectMode\", nzShowIcon: \"nzShowIcon\", nzTreeTemplate: \"nzTreeTemplate\", nzSearchValue: \"nzSearchValue\", nzDraggable: \"nzDraggable\", isExpanded: \"isExpanded\", isLeaf: \"isLeaf\", isChecked: \"isChecked\", isHalfChecked: \"isHalfChecked\", isDisableCheckbox: \"isDisableCheckbox\", isSelectable: \"isSelectable\", canHide: \"canHide\", isStart: \"isStart\", isEnd: \"isEnd\", nzTreeNode: \"nzTreeNode\", nzShowLine: \"nzShowLine\", nzShowExpand: \"nzShowExpand\", nzCheckable: \"nzCheckable\", nzAsyncData: \"nzAsyncData\", nzExpandedIcon: \"nzExpandedIcon\", nzBeforeDrop: \"nzBeforeDrop\" }, outputs: { nzClick: \"nzClick\", nzDblClick: \"nzDblClick\", nzContextMenu: \"nzContextMenu\", nzCheckBoxChange: \"nzCheckBoxChange\", nzExpandChange: \"nzExpandChange\", nzOnDragStart: \"nzOnDragStart\", nzOnDragEnter: \"nzOnDragEnter\", nzOnDragOver: \"nzOnDragOver\", nzOnDragLeave: \"nzOnDragLeave\", nzOnDrop: \"nzOnDrop\", nzOnDragEnd: \"nzOnDragEnd\" }, exportAs: [\"nzTreeNode\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 20, consts: [[3, \"nzTreeLevel\", \"nzSelectMode\", \"nzIsStart\", \"nzIsEnd\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\", 4, \"ngIf\"], [3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\", 4, \"ngIf\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"dblclick\", \"click\", \"contextmenu\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\"], [3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\"]], template: function NzTreeNodeComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"nz-tree-indent\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzTreeNodeComponent_nz_tree_node_switcher_1_Template, 1, 8, \"nz-tree-node-switcher\", 1);\n        ɵngcc0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_checkbox_2_Template, 1, 5, \"nz-tree-node-checkbox\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"nz-tree-node-title\", 3);\n        ɵngcc0.ɵɵlistener(\"dblclick\", function NzTreeNodeComponent_Template_nz_tree_node_title_dblclick_3_listener($event) { return ctx.dblClick($event); })(\"click\", function NzTreeNodeComponent_Template_nz_tree_node_title_click_3_listener($event) { return ctx.clickSelect($event); })(\"contextmenu\", function NzTreeNodeComponent_Template_nz_tree_node_title_contextmenu_3_listener($event) { return ctx.contextMenu($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"nzTreeLevel\", ctx.nzTreeNode.level)(\"nzSelectMode\", ctx.nzSelectMode)(\"nzIsStart\", ctx.isStart)(\"nzIsEnd\", ctx.isEnd);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzShowExpand);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzCheckable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"icon\", ctx.icon)(\"title\", ctx.title)(\"isLoading\", ctx.isLoading)(\"isSelected\", ctx.isSelected)(\"isDisabled\", ctx.isDisabled)(\"isMatched\", ctx.isMatched)(\"isExpanded\", ctx.isExpanded)(\"isLeaf\", ctx.isLeaf)(\"searchValue\", ctx.nzSearchValue)(\"treeTemplate\", ctx.nzTreeTemplate)(\"draggable\", ctx.nzDraggable)(\"showIcon\", ctx.nzShowIcon)(\"selectMode\", ctx.nzSelectMode)(\"context\", ctx.nzTreeNode);\n    } }, directives: [NzTreeIndentComponent, ɵngcc1.NgIf, NzTreeNodeTitleComponent,\n        NzTreeNodeSwitcherComponent,\n        NzTreeNodeCheckboxComponent], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nNzTreeNodeComponent.ctorParameters = () => [\n    { type: NzTreeBaseService },\n    { type: NgZone },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NzNoAnimationDirective, decorators: [{ type: Host }, { type: Optional }] }\n];\nNzTreeNodeComponent.propDecorators = {\n    icon: [{ type: Input }],\n    title: [{ type: Input }],\n    isLoading: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    isDisabled: [{ type: Input }],\n    isMatched: [{ type: Input }],\n    isExpanded: [{ type: Input }],\n    isLeaf: [{ type: Input }],\n    isChecked: [{ type: Input }],\n    isHalfChecked: [{ type: Input }],\n    isDisableCheckbox: [{ type: Input }],\n    isSelectable: [{ type: Input }],\n    canHide: [{ type: Input }],\n    isStart: [{ type: Input }],\n    isEnd: [{ type: Input }],\n    nzTreeNode: [{ type: Input }],\n    nzShowLine: [{ type: Input }],\n    nzShowExpand: [{ type: Input }],\n    nzCheckable: [{ type: Input }],\n    nzAsyncData: [{ type: Input }],\n    nzHideUnMatched: [{ type: Input }],\n    nzNoAnimation: [{ type: Input }],\n    nzSelectMode: [{ type: Input }],\n    nzShowIcon: [{ type: Input }],\n    nzExpandedIcon: [{ type: Input }],\n    nzTreeTemplate: [{ type: Input }],\n    nzBeforeDrop: [{ type: Input }],\n    nzSearchValue: [{ type: Input }],\n    nzDraggable: [{ type: Input }],\n    nzClick: [{ type: Output }],\n    nzDblClick: [{ type: Output }],\n    nzContextMenu: [{ type: Output }],\n    nzCheckBoxChange: [{ type: Output }],\n    nzExpandChange: [{ type: Output }],\n    nzOnDragStart: [{ type: Output }],\n    nzOnDragEnter: [{ type: Output }],\n    nzOnDragOver: [{ type: Output }],\n    nzOnDragLeave: [{ type: Output }],\n    nzOnDrop: [{ type: Output }],\n    nzOnDragEnd: [{ type: Output }]\n};\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeNodeComponent.prototype, \"nzShowLine\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeNodeComponent.prototype, \"nzShowExpand\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeNodeComponent.prototype, \"nzCheckable\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeNodeComponent.prototype, \"nzAsyncData\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeComponent.prototype, \"nzHideUnMatched\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeComponent.prototype, \"nzNoAnimation\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeComponent.prototype, \"nzSelectMode\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeComponent.prototype, \"nzShowIcon\", void 0);\nif (false) {\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzShowLine;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzShowExpand;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzCheckable;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzAsyncData;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzHideUnMatched;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzNoAnimation;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzSelectMode;\n    /** @type {?} */\n    NzTreeNodeComponent.ngAcceptInputType_nzShowIcon;\n    /**\n     * for global property\n     * @type {?}\n     */\n    NzTreeNodeComponent.prototype.icon;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.title;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isLoading;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isSelected;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isDisabled;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isMatched;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isExpanded;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isLeaf;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isChecked;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isHalfChecked;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isDisableCheckbox;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isSelectable;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.canHide;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isStart;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.isEnd;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzTreeNode;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzShowLine;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzShowExpand;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzCheckable;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzAsyncData;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzHideUnMatched;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzNoAnimation;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzSelectMode;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzShowIcon;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzExpandedIcon;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzTreeTemplate;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzBeforeDrop;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzSearchValue;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzDraggable;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzClick;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzDblClick;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzContextMenu;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzCheckBoxChange;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzExpandChange;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDragStart;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDragEnter;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDragOver;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDragLeave;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDrop;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzOnDragEnd;\n    /**\n     * drag var\n     * @type {?}\n     */\n    NzTreeNodeComponent.prototype.destroy$;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.dragPos;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.dragPosClass;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.nzTreeService;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNodeComponent.prototype.ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNodeComponent.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNodeComponent.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeNodeComponent.prototype.cdr;\n    /** @type {?} */\n    NzTreeNodeComponent.prototype.noAnimation;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeService extends NzTreeBaseService {\n    constructor() {\n        super();\n    }\n}\nNzTreeService.ɵfac = function NzTreeService_Factory(t) { return new (t || NzTreeService)(); };\nNzTreeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NzTreeService, factory: NzTreeService.ɵfac });\n/** @nocollapse */\nNzTreeService.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} higherOrderService\n * @param {?} treeService\n * @return {?}\n */\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n    return higherOrderService ? higherOrderService : treeService;\n}\n/** @type {?} */\nconst NZ_CONFIG_COMPONENT_NAME = 'tree';\nclass NzTreeComponent extends NzTreeBase {\n    // Handle emit event end\n    /**\n     * @param {?} nzTreeService\n     * @param {?} nzConfigService\n     * @param {?} cdr\n     * @param {?=} noAnimation\n     */\n    constructor(nzTreeService, nzConfigService, cdr, noAnimation) {\n        super(nzTreeService);\n        this.nzConfigService = nzConfigService;\n        this.cdr = cdr;\n        this.noAnimation = noAnimation;\n        this.nzShowIcon = false;\n        this.nzHideUnMatched = false;\n        this.nzBlockNode = false;\n        this.nzExpandAll = false;\n        this.nzSelectMode = false;\n        this.nzCheckStrictly = false;\n        this.nzShowExpand = true;\n        this.nzShowLine = false;\n        this.nzCheckable = false;\n        this.nzAsyncData = false;\n        this.nzDraggable = false;\n        this.nzMultiple = false;\n        this.nzVirtualItemSize = 28;\n        this.nzVirtualMaxBufferPx = 500;\n        this.nzVirtualMinBufferPx = 28;\n        this.nzVirtualHeight = null;\n        this.nzData = [];\n        this.nzExpandedKeys = [];\n        this.nzSelectedKeys = [];\n        this.nzCheckedKeys = [];\n        this.nzFlattenNodes = [];\n        this.beforeInit = true;\n        this.nzExpandedKeysChange = new EventEmitter();\n        this.nzSelectedKeysChange = new EventEmitter();\n        this.nzCheckedKeysChange = new EventEmitter();\n        this.nzSearchValueChange = new EventEmitter();\n        this.nzClick = new EventEmitter();\n        this.nzDblClick = new EventEmitter();\n        this.nzContextMenu = new EventEmitter();\n        this.nzCheckBoxChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzOnDragStart = new EventEmitter();\n        this.nzOnDragEnter = new EventEmitter();\n        this.nzOnDragOver = new EventEmitter();\n        this.nzOnDragLeave = new EventEmitter();\n        this.nzOnDrop = new EventEmitter();\n        this.nzOnDragEnd = new EventEmitter();\n        this.HIDDEN_STYLE = {\n            width: 0,\n            height: 0,\n            display: 'flex',\n            overflow: 'hidden',\n            opacity: 0,\n            border: 0,\n            padding: 0,\n            margin: 0\n        };\n        this.destroy$ = new Subject();\n        this.onChange = (/**\n         * @return {?}\n         */\n        () => null);\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.handleNzData(value);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Render all properties of nzTree\n     * @param {?} changes\n     * @return {?}\n     */\n    renderTreeProperties(changes) {\n        /** @type {?} */\n        let useDefaultExpandedKeys = false;\n        /** @type {?} */\n        let expandAll = false;\n        const { nzData, nzExpandedKeys, nzSelectedKeys, nzCheckedKeys, nzCheckStrictly, nzExpandAll, nzMultiple, nzSearchValue } = changes;\n        if (nzExpandAll) {\n            useDefaultExpandedKeys = true;\n            expandAll = this.nzExpandAll;\n        }\n        if (nzMultiple) {\n            this.nzTreeService.isMultiple = this.nzMultiple;\n        }\n        if (nzCheckStrictly) {\n            this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n        }\n        if (nzData) {\n            this.handleNzData(this.nzData);\n        }\n        if (nzCheckedKeys || nzCheckStrictly) {\n            this.handleCheckedKeys(this.nzCheckedKeys);\n        }\n        if (nzExpandedKeys || nzExpandAll) {\n            useDefaultExpandedKeys = true;\n            this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n        }\n        if (nzSelectedKeys) {\n            this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n        }\n        if (nzSearchValue) {\n            if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n                useDefaultExpandedKeys = false;\n                this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n                this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n            }\n        }\n        // flatten data\n        /** @type {?} */\n        const currentExpandedKeys = this.getExpandedNodeList().map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.key));\n        /** @type {?} */\n        const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n        this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n    }\n    /**\n     * @param {?} _\n     * @param {?} node\n     * @return {?}\n     */\n    trackByFlattenNode(_, node) {\n        return node.key;\n    }\n    // Deal with properties\n    /**\n     * nzData\n     * @param {?} value\n     * @return {?}\n     */\n    handleNzData(value) {\n        if (Array.isArray(value)) {\n            /** @type {?} */\n            const data = this.coerceTreeNodes(value);\n            this.nzTreeService.initTree(data);\n        }\n    }\n    /**\n     * @param {?} data\n     * @param {?=} expandKeys\n     * @return {?}\n     */\n    handleFlattenNodes(data, expandKeys = []) {\n        this.nzTreeService.flattenTreeData(data, expandKeys);\n    }\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    handleCheckedKeys(keys) {\n        this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n    }\n    /**\n     * @param {?=} keys\n     * @return {?}\n     */\n    handleExpandedKeys(keys = []) {\n        this.nzTreeService.conductExpandedKeys(keys);\n    }\n    /**\n     * @param {?} keys\n     * @param {?} isMulti\n     * @return {?}\n     */\n    handleSelectedKeys(keys, isMulti) {\n        this.nzTreeService.conductSelectedKeys(keys, isMulti);\n    }\n    /**\n     * @param {?} value\n     * @param {?=} searchFunc\n     * @return {?}\n     */\n    handleSearchValue(value, searchFunc) {\n        /** @type {?} */\n        const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.data));\n        /** @type {?} */\n        const checkIfMatched = (/**\n         * @param {?} node\n         * @return {?}\n         */\n        (node) => {\n            if (searchFunc) {\n                return searchFunc(node.origin);\n            }\n            return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n        });\n        dataList.forEach((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => {\n            v.isMatched = checkIfMatched(v);\n            v.canHide = !v.isMatched;\n            if (!v.isMatched) {\n                v.setExpanded(false);\n                this.nzTreeService.setExpandedNodeList(v);\n            }\n            else {\n                // expand\n                this.nzTreeService.expandNodeAllParentBySearch(v);\n            }\n            this.nzTreeService.setMatchedNodeList(v);\n        }));\n    }\n    /**\n     * Handle emit event\n     * @param {?} event\n     * handle each event\n     * @return {?}\n     */\n    eventTriggerChanged(event) {\n        /** @type {?} */\n        const node = (/** @type {?} */ (event.node));\n        switch (event.eventName) {\n            case 'expand':\n                this.renderTree();\n                this.nzExpandChange.emit(event);\n                break;\n            case 'click':\n                this.nzClick.emit(event);\n                break;\n            case 'dblclick':\n                this.nzDblClick.emit(event);\n                break;\n            case 'contextmenu':\n                this.nzContextMenu.emit(event);\n                break;\n            case 'check':\n                // Render checked state with nodes' property `isChecked`\n                this.nzTreeService.setCheckedNodeList(node);\n                if (!this.nzCheckStrictly) {\n                    this.nzTreeService.conduct(node);\n                }\n                // Cause check method will rerender list, so we need recover it and next the new event to user\n                /** @type {?} */\n                const eventNext = this.nzTreeService.formatEvent('check', node, (/** @type {?} */ (event.event)));\n                this.nzCheckBoxChange.emit(eventNext);\n                break;\n            case 'dragstart':\n                // if node is expanded\n                if (node.isExpanded) {\n                    node.setExpanded(!node.isExpanded);\n                    this.renderTree();\n                }\n                this.nzOnDragStart.emit(event);\n                break;\n            case 'dragenter':\n                /** @type {?} */\n                const selectedNode = this.nzTreeService.getSelectedNode();\n                if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n                    node.setExpanded(true);\n                    this.renderTree();\n                }\n                this.nzOnDragEnter.emit(event);\n                break;\n            case 'dragover':\n                this.nzOnDragOver.emit(event);\n                break;\n            case 'dragleave':\n                this.nzOnDragLeave.emit(event);\n                break;\n            case 'dragend':\n                this.nzOnDragEnd.emit(event);\n                break;\n            case 'drop':\n                this.renderTree();\n                this.nzOnDrop.emit(event);\n                break;\n        }\n    }\n    /**\n     * Click expand icon\n     * @return {?}\n     */\n    renderTree() {\n        this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => v.key)));\n        this.cdr.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this.nzFlattenNodes = data;\n            this.cdr.markForCheck();\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.renderTreeProperties(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.beforeInit = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\nNzTreeComponent.ɵfac = function NzTreeComponent_Factory(t) { return new (t || NzTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NzTreeBaseService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NzNoAnimationDirective, 9)); };\nNzTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeComponent, selectors: [[\"nz-tree\"]], contentQueries: function NzTreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, _c1, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nzTreeTemplateChild = _t.first);\n    } }, viewQuery: function NzTreeComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, true, CdkVirtualScrollViewport);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);\n    } }, hostVars: 18, hostBindings: function NzTreeComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-select-tree\", ctx.nzSelectMode)(\"ant-select-tree-show-line\", ctx.nzSelectMode && ctx.nzShowLine)(\"ant-select-tree-icon-hide\", ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-select-tree-block-node\", ctx.nzSelectMode && ctx.nzBlockNode)(\"ant-tree\", !ctx.nzSelectMode)(\"ant-tree-show-line\", !ctx.nzSelectMode && ctx.nzShowLine)(\"ant-tree-icon-hide\", !ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-tree-block-node\", !ctx.nzSelectMode && ctx.nzBlockNode)(\"draggable-tree\", ctx.nzDraggable);\n    } }, inputs: { nzShowIcon: \"nzShowIcon\", nzHideUnMatched: \"nzHideUnMatched\", nzBlockNode: \"nzBlockNode\", nzExpandAll: \"nzExpandAll\", nzSelectMode: \"nzSelectMode\", nzCheckStrictly: \"nzCheckStrictly\", nzShowExpand: \"nzShowExpand\", nzShowLine: \"nzShowLine\", nzCheckable: \"nzCheckable\", nzAsyncData: \"nzAsyncData\", nzDraggable: \"nzDraggable\", nzMultiple: \"nzMultiple\", nzVirtualItemSize: \"nzVirtualItemSize\", nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\", nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\", nzVirtualHeight: \"nzVirtualHeight\", nzData: \"nzData\", nzExpandedKeys: \"nzExpandedKeys\", nzSelectedKeys: \"nzSelectedKeys\", nzCheckedKeys: \"nzCheckedKeys\", nzExpandedIcon: \"nzExpandedIcon\", nzTreeTemplate: \"nzTreeTemplate\", nzBeforeDrop: \"nzBeforeDrop\", nzSearchValue: \"nzSearchValue\", nzSearchFunc: \"nzSearchFunc\" }, outputs: { nzExpandedKeysChange: \"nzExpandedKeysChange\", nzSelectedKeysChange: \"nzSelectedKeysChange\", nzCheckedKeysChange: \"nzCheckedKeysChange\", nzSearchValueChange: \"nzSearchValueChange\", nzClick: \"nzClick\", nzDblClick: \"nzDblClick\", nzContextMenu: \"nzContextMenu\", nzCheckBoxChange: \"nzCheckBoxChange\", nzExpandChange: \"nzExpandChange\", nzOnDragStart: \"nzOnDragStart\", nzOnDragEnter: \"nzOnDragEnter\", nzOnDragOver: \"nzOnDragOver\", nzOnDragLeave: \"nzOnDragLeave\", nzOnDrop: \"nzOnDrop\", nzOnDragEnd: \"nzOnDragEnd\" }, exportAs: [\"nzTree\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            NzTreeService,\n            {\n                provide: NzTreeBaseService,\n                useFactory: NzTreeServiceFactory,\n                deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n            },\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => NzTreeComponent)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 7, consts: [[\"role\", \"tree\"], [3, \"ngStyle\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"itemSize\", \"minBufferPx\", \"maxBufferPx\", \"height\", 4, \"ngIf\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"nzNoAnimation\", 4, \"ngIf\"], [\"nodeTemplate\", \"\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"nzNoAnimation\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isStart\", \"isEnd\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"nzTreeNode\", \"nzSelectMode\", \"nzShowLine\", \"nzExpandedIcon\", \"nzDraggable\", \"nzCheckable\", \"nzShowExpand\", \"nzAsyncData\", \"nzSearchValue\", \"nzHideUnMatched\", \"nzBeforeDrop\", \"nzShowIcon\", \"nzTreeTemplate\", \"nzExpandChange\", \"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDragEnd\", \"nzOnDrop\"]], template: function NzTreeComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"input\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\");\n        ɵngcc0.ɵɵelementStart(3, \"div\");\n        ɵngcc0.ɵɵtemplate(4, NzTreeComponent_cdk_virtual_scroll_viewport_4_Template, 2, 11, \"cdk-virtual-scroll-viewport\", 2);\n        ɵngcc0.ɵɵtemplate(5, NzTreeComponent_div_5_Template, 2, 9, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, NzTreeComponent_ng_template_6_Template, 1, 28, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_STYLE);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"ant-select-tree-list\", ctx.nzSelectMode)(\"ant-tree-list\", ctx.nzSelectMode);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzVirtualHeight);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.nzVirtualHeight);\n    } }, directives: [ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc8.CdkVirtualScrollViewport, ɵngcc8.CdkFixedSizeVirtualScroll, ɵngcc8.CdkVirtualForOf, ɵngcc1.NgTemplateOutlet, ɵngcc6.NzNoAnimationDirective, ɵngcc1.NgForOf, NzTreeNodeComponent], encapsulation: 2, data: { animation: [treeCollapseMotion] }, changeDetection: 0 });\n/** @nocollapse */\nNzTreeComponent.ctorParameters = () => [\n    { type: NzTreeBaseService },\n    { type: NzConfigService },\n    { type: ChangeDetectorRef },\n    { type: NzNoAnimationDirective, decorators: [{ type: Host }, { type: Optional }] }\n];\nNzTreeComponent.propDecorators = {\n    nzShowIcon: [{ type: Input }],\n    nzHideUnMatched: [{ type: Input }],\n    nzBlockNode: [{ type: Input }],\n    nzExpandAll: [{ type: Input }],\n    nzSelectMode: [{ type: Input }],\n    nzCheckStrictly: [{ type: Input }],\n    nzShowExpand: [{ type: Input }],\n    nzShowLine: [{ type: Input }],\n    nzCheckable: [{ type: Input }],\n    nzAsyncData: [{ type: Input }],\n    nzDraggable: [{ type: Input }],\n    nzMultiple: [{ type: Input }],\n    nzExpandedIcon: [{ type: Input }],\n    nzVirtualItemSize: [{ type: Input }],\n    nzVirtualMaxBufferPx: [{ type: Input }],\n    nzVirtualMinBufferPx: [{ type: Input }],\n    nzVirtualHeight: [{ type: Input }],\n    nzTreeTemplate: [{ type: Input }],\n    nzBeforeDrop: [{ type: Input }],\n    nzData: [{ type: Input }],\n    nzExpandedKeys: [{ type: Input }],\n    nzSelectedKeys: [{ type: Input }],\n    nzCheckedKeys: [{ type: Input }],\n    nzSearchValue: [{ type: Input }],\n    nzSearchFunc: [{ type: Input }],\n    nzTreeTemplateChild: [{ type: ContentChild, args: ['nzTreeTemplate', { static: true },] }],\n    cdkVirtualScrollViewport: [{ type: ViewChild, args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport },] }],\n    nzExpandedKeysChange: [{ type: Output }],\n    nzSelectedKeysChange: [{ type: Output }],\n    nzCheckedKeysChange: [{ type: Output }],\n    nzSearchValueChange: [{ type: Output }],\n    nzClick: [{ type: Output }],\n    nzDblClick: [{ type: Output }],\n    nzContextMenu: [{ type: Output }],\n    nzCheckBoxChange: [{ type: Output }],\n    nzExpandChange: [{ type: Output }],\n    nzOnDragStart: [{ type: Output }],\n    nzOnDragEnter: [{ type: Output }],\n    nzOnDragOver: [{ type: Output }],\n    nzOnDragLeave: [{ type: Output }],\n    nzOnDrop: [{ type: Output }],\n    nzOnDragEnd: [{ type: Output }]\n};\n__decorate([\n    InputBoolean(), WithConfig(NZ_CONFIG_COMPONENT_NAME),\n    __metadata(\"design:type\", Boolean)\n], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n__decorate([\n    InputBoolean(), WithConfig(NZ_CONFIG_COMPONENT_NAME),\n    __metadata(\"design:type\", Boolean)\n], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n__decorate([\n    InputBoolean(), WithConfig(NZ_CONFIG_COMPONENT_NAME),\n    __metadata(\"design:type\", Boolean)\n], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeIndentComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-indent',\n                exportAs: 'nzTreeIndent',\n                template: ` <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    '[attr.aria-hidden]': 'true',\n                    '[class.ant-tree-indent]': '!nzSelectMode',\n                    '[class.ant-select-tree-indent]': 'nzSelectMode'\n                }\n            }]\n    }], function () { return []; }, { nzSelectMode: [{\n            type: Input\n        }], nzTreeLevel: [{\n            type: Input\n        }], nzIsStart: [{\n            type: Input\n        }], nzIsEnd: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-checkbox',\n                template: ` <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span> `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    '[class.ant-select-tree-checkbox]': `nzSelectMode`,\n                    '[class.ant-select-tree-checkbox-checked]': `nzSelectMode && isChecked`,\n                    '[class.ant-select-tree-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n                    '[class.ant-select-tree-checkbox-disabled]': `nzSelectMode && (isDisabled || isDisableCheckbox)`,\n                    '[class.ant-tree-checkbox]': `!nzSelectMode`,\n                    '[class.ant-tree-checkbox-checked]': `!nzSelectMode && isChecked`,\n                    '[class.ant-tree-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n                    '[class.ant-tree-checkbox-disabled]': `!nzSelectMode && (isDisabled || isDisableCheckbox)`\n                }\n            }]\n    }], function () { return []; }, { nzSelectMode: [{\n            type: Input\n        }], isChecked: [{\n            type: Input\n        }], isHalfChecked: [{\n            type: Input\n        }], isDisabled: [{\n            type: Input\n        }], isDisableCheckbox: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeNodeSwitcherComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-switcher',\n                template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    '[class.ant-select-tree-switcher]': 'nzSelectMode',\n                    '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n                    '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n                    '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n                    '[class.ant-tree-switcher]': '!nzSelectMode',\n                    '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n                    '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n                    '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n                }\n            }]\n    }], function () { return []; }, { nzSelectMode: [{\n            type: Input\n        }], nzShowExpand: [{\n            type: Input\n        }], nzShowLine: [{\n            type: Input\n        }], nzExpandedIcon: [{\n            type: Input\n        }], context: [{\n            type: Input\n        }], isLeaf: [{\n            type: Input\n        }], isLoading: [{\n            type: Input\n        }], isExpanded: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeNodeTitleComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-title',\n                template: ` <ng-template [ngTemplateOutlet]=\"treeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\">\n    </ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"> </span>\n    </ng-container>`,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    '[attr.title]': 'title',\n                    '[attr.draggable]': 'canDraggable',\n                    '[attr.aria-grabbed]': 'canDraggable',\n                    '[class.draggable]': 'canDraggable',\n                    '[class.ant-select-tree-node-content-wrapper]': `selectMode`,\n                    '[class.ant-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,\n                    '[class.ant-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,\n                    '[class.ant-select-tree-node-selected]': `selectMode && isSelected`,\n                    '[class.ant-tree-node-content-wrapper]': `!selectMode`,\n                    '[class.ant-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,\n                    '[class.ant-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,\n                    '[class.ant-tree-node-selected]': `!selectMode && isSelected`\n                }\n            }]\n    }], function () { return []; }, { treeTemplate: [{\n            type: Input\n        }], selectMode: [{\n            type: Input\n        }], searchValue: [{\n            type: Input\n        }], draggable: [{\n            type: Input\n        }], showIcon: [{\n            type: Input\n        }], context: [{\n            type: Input\n        }], icon: [{\n            type: Input\n        }], title: [{\n            type: Input\n        }], isLoading: [{\n            type: Input\n        }], isSelected: [{\n            type: Input\n        }], isDisabled: [{\n            type: Input\n        }], isMatched: [{\n            type: Input\n        }], isExpanded: [{\n            type: Input\n        }], isLeaf: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node',\n                exportAs: 'nzTreeNode',\n                template: `\n    <nz-tree-indent [nzTreeLevel]=\"nzTreeNode.level\" [nzSelectMode]=\"nzSelectMode\" [nzIsStart]=\"isStart\" [nzIsEnd]=\"isEnd\"></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    '[class.ant-select-tree-treenode]': `nzSelectMode`,\n                    '[class.ant-select-tree-treenode-disabled]': `nzSelectMode && isDisabled`,\n                    '[class.ant-select-tree-treenode-switcher-open]': `nzSelectMode && isSwitcherOpen`,\n                    '[class.ant-select-tree-treenode-switcher-close]': `nzSelectMode && isSwitcherClose`,\n                    '[class.ant-select-tree-treenode-checkbox-checked]': `nzSelectMode && isChecked`,\n                    '[class.ant-select-tree-treenode-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n                    '[class.ant-select-tree-treenode-selected]': `nzSelectMode && isSelected`,\n                    '[class.ant-select-tree-treenode-loading]': `nzSelectMode && isLoading`,\n                    '[class.ant-tree-treenode]': `!nzSelectMode`,\n                    '[class.ant-tree-treenode-disabled]': `!nzSelectMode && isDisabled`,\n                    '[class.ant-tree-treenode-switcher-open]': `!nzSelectMode && isSwitcherOpen`,\n                    '[class.ant-tree-treenode-switcher-close]': `!nzSelectMode && isSwitcherClose`,\n                    '[class.ant-tree-treenode-checkbox-checked]': `!nzSelectMode && isChecked`,\n                    '[class.ant-tree-treenode-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n                    '[class.ant-tree-treenode-selected]': `!nzSelectMode && isSelected`,\n                    '[class.ant-tree-treenode-loading]': `!nzSelectMode && isLoading`,\n                    '[style.display]': 'displayStyle',\n                    '(mousedown)': 'onMousedown($event)'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc5.NzTreeBaseService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.NzNoAnimationDirective, decorators: [{\n                type: Host\n            }, {\n                type: Optional\n            }] }]; }, { icon: [{\n            type: Input\n        }], title: [{\n            type: Input\n        }], isLoading: [{\n            type: Input\n        }], isSelected: [{\n            type: Input\n        }], isDisabled: [{\n            type: Input\n        }], isMatched: [{\n            type: Input\n        }], nzHideUnMatched: [{\n            type: Input\n        }], nzNoAnimation: [{\n            type: Input\n        }], nzSelectMode: [{\n            type: Input\n        }], nzShowIcon: [{\n            type: Input\n        }], nzTreeTemplate: [{\n            type: Input\n        }], nzSearchValue: [{\n            type: Input\n        }], nzDraggable: [{\n            type: Input\n        }], nzClick: [{\n            type: Output\n        }], nzDblClick: [{\n            type: Output\n        }], nzContextMenu: [{\n            type: Output\n        }], nzCheckBoxChange: [{\n            type: Output\n        }], nzExpandChange: [{\n            type: Output\n        }], nzOnDragStart: [{\n            type: Output\n        }], nzOnDragEnter: [{\n            type: Output\n        }], nzOnDragOver: [{\n            type: Output\n        }], nzOnDragLeave: [{\n            type: Output\n        }], nzOnDrop: [{\n            type: Output\n        }], nzOnDragEnd: [{\n            type: Output\n        }], isExpanded: [{\n            type: Input\n        }], isLeaf: [{\n            type: Input\n        }], isChecked: [{\n            type: Input\n        }], isHalfChecked: [{\n            type: Input\n        }], isDisableCheckbox: [{\n            type: Input\n        }], isSelectable: [{\n            type: Input\n        }], canHide: [{\n            type: Input\n        }], isStart: [{\n            type: Input\n        }], isEnd: [{\n            type: Input\n        }], nzTreeNode: [{\n            type: Input\n        }], nzShowLine: [{\n            type: Input\n        }], nzShowExpand: [{\n            type: Input\n        }], nzCheckable: [{\n            type: Input\n        }], nzAsyncData: [{\n            type: Input\n        }], nzExpandedIcon: [{\n            type: Input\n        }], nzBeforeDrop: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree',\n                exportAs: 'nzTree',\n                animations: [treeCollapseMotion],\n                template: `\n    <div role=\"tree\">\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div [class.ant-select-tree-list]=\"nzSelectMode\" [class.ant-tree-list]=\"nzSelectMode\">\n      <div>\n        <cdk-virtual-scroll-viewport\n          *ngIf=\"nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"nzSelectMode\"\n          [itemSize]=\"nzVirtualItemSize\"\n          [minBufferPx]=\"nzVirtualMinBufferPx\"\n          [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n          [style.height]=\"nzVirtualHeight\"\n        >\n          <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n\n        <div\n          *ngIf=\"!nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"nzSelectMode\"\n          [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n          [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n          [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n        >\n          <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      >\n      </nz-tree-node>\n    </ng-template>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    NzTreeService,\n                    {\n                        provide: NzTreeBaseService,\n                        useFactory: NzTreeServiceFactory,\n                        deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n                    },\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => NzTreeComponent)),\n                        multi: true\n                    }\n                ],\n                host: {\n                    '[class.ant-select-tree]': `nzSelectMode`,\n                    '[class.ant-select-tree-show-line]': `nzSelectMode && nzShowLine`,\n                    '[class.ant-select-tree-icon-hide]': `nzSelectMode && !nzShowIcon`,\n                    '[class.ant-select-tree-block-node]': `nzSelectMode && nzBlockNode`,\n                    '[class.ant-tree]': `!nzSelectMode`,\n                    '[class.ant-tree-show-line]': `!nzSelectMode && nzShowLine`,\n                    '[class.ant-tree-icon-hide]': `!nzSelectMode && !nzShowIcon`,\n                    '[class.ant-tree-block-node]': `!nzSelectMode && nzBlockNode`,\n                    '[class.draggable-tree]': `nzDraggable`\n                }\n            }]\n    }], function () { return [{ type: ɵngcc5.NzTreeBaseService }, { type: ɵngcc7.NzConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.NzNoAnimationDirective, decorators: [{\n                type: Host\n            }, {\n                type: Optional\n            }] }]; }, { nzShowIcon: [{\n            type: Input\n        }], nzHideUnMatched: [{\n            type: Input\n        }], nzBlockNode: [{\n            type: Input\n        }], nzExpandAll: [{\n            type: Input\n        }], nzSelectMode: [{\n            type: Input\n        }], nzCheckStrictly: [{\n            type: Input\n        }], nzShowExpand: [{\n            type: Input\n        }], nzShowLine: [{\n            type: Input\n        }], nzCheckable: [{\n            type: Input\n        }], nzAsyncData: [{\n            type: Input\n        }], nzDraggable: [{\n            type: Input\n        }], nzMultiple: [{\n            type: Input\n        }], nzVirtualItemSize: [{\n            type: Input\n        }], nzVirtualMaxBufferPx: [{\n            type: Input\n        }], nzVirtualMinBufferPx: [{\n            type: Input\n        }], nzVirtualHeight: [{\n            type: Input\n        }], nzData: [{\n            type: Input\n        }], nzExpandedKeys: [{\n            type: Input\n        }], nzSelectedKeys: [{\n            type: Input\n        }], nzCheckedKeys: [{\n            type: Input\n        }], nzExpandedKeysChange: [{\n            type: Output\n        }], nzSelectedKeysChange: [{\n            type: Output\n        }], nzCheckedKeysChange: [{\n            type: Output\n        }], nzSearchValueChange: [{\n            type: Output\n        }], nzClick: [{\n            type: Output\n        }], nzDblClick: [{\n            type: Output\n        }], nzContextMenu: [{\n            type: Output\n        }], nzCheckBoxChange: [{\n            type: Output\n        }], nzExpandChange: [{\n            type: Output\n        }], nzOnDragStart: [{\n            type: Output\n        }], nzOnDragEnter: [{\n            type: Output\n        }], nzOnDragOver: [{\n            type: Output\n        }], nzOnDragLeave: [{\n            type: Output\n        }], nzOnDrop: [{\n            type: Output\n        }], nzOnDragEnd: [{\n            type: Output\n        }], nzExpandedIcon: [{\n            type: Input\n        }], nzTreeTemplate: [{\n            type: Input\n        }], nzBeforeDrop: [{\n            type: Input\n        }], nzSearchValue: [{\n            type: Input\n        }], nzSearchFunc: [{\n            type: Input\n        }], nzTreeTemplateChild: [{\n            type: ContentChild,\n            args: ['nzTreeTemplate', { static: true }]\n        }], cdkVirtualScrollViewport: [{\n            type: ViewChild,\n            args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzShowIcon;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzHideUnMatched;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzBlockNode;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzExpandAll;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzSelectMode;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzCheckStrictly;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzShowExpand;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzShowLine;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzCheckable;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzAsyncData;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzDraggable;\n    /** @type {?} */\n    NzTreeComponent.ngAcceptInputType_nzMultiple;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzShowIcon;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzHideUnMatched;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzBlockNode;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzExpandAll;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSelectMode;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzCheckStrictly;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzShowExpand;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzShowLine;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzCheckable;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzAsyncData;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzDraggable;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzMultiple;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzExpandedIcon;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzVirtualItemSize;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzVirtualMaxBufferPx;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzVirtualMinBufferPx;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzVirtualHeight;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzTreeTemplate;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzBeforeDrop;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzData;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzExpandedKeys;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSelectedKeys;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzCheckedKeys;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSearchValue;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSearchFunc;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzTreeTemplateChild;\n    /** @type {?} */\n    NzTreeComponent.prototype.cdkVirtualScrollViewport;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzFlattenNodes;\n    /** @type {?} */\n    NzTreeComponent.prototype.beforeInit;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzExpandedKeysChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSelectedKeysChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzCheckedKeysChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzSearchValueChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzClick;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzDblClick;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzContextMenu;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzCheckBoxChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzExpandChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDragStart;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDragEnter;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDragOver;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDragLeave;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDrop;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzOnDragEnd;\n    /** @type {?} */\n    NzTreeComponent.prototype.HIDDEN_STYLE;\n    /** @type {?} */\n    NzTreeComponent.prototype.destroy$;\n    /** @type {?} */\n    NzTreeComponent.prototype.onChange;\n    /** @type {?} */\n    NzTreeComponent.prototype.onTouched;\n    /** @type {?} */\n    NzTreeComponent.prototype.nzConfigService;\n    /**\n     * @type {?}\n     * @private\n     */\n    NzTreeComponent.prototype.cdr;\n    /** @type {?} */\n    NzTreeComponent.prototype.noAnimation;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: tree.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NzTreeModule {\n}\nNzTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NzTreeModule });\nNzTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NzTreeModule_Factory(t) { return new (t || NzTreeModule)(); }, imports: [[CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTreeModule, { declarations: function () { return [NzTreeComponent,\n        NzTreeNodeComponent,\n        NzTreeIndentComponent,\n        NzTreeNodeSwitcherComponent,\n        NzTreeNodeCheckboxComponent,\n        NzTreeNodeTitleComponent]; }, imports: function () { return [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]; }, exports: function () { return [NzTreeComponent,\n        NzTreeNodeComponent,\n        NzTreeIndentComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n                declarations: [\n                    NzTreeComponent,\n                    NzTreeNodeComponent,\n                    NzTreeIndentComponent,\n                    NzTreeNodeSwitcherComponent,\n                    NzTreeNodeCheckboxComponent,\n                    NzTreeNodeTitleComponent\n                ],\n                exports: [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory };\n\n//# sourceMappingURL=ng-zorro-antd-tree.js.map"],"sourceRoot":"webpack:///"}