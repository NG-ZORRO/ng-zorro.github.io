{"version":3,"sources":["./publish/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-time.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACF;AACgC;AACI;AACF;AAChB;AACI;AACA;AACJ;AACF;AACd;AACE;AACI;AACF;AACE;AACJ;AACN;AACA;AACF;AACI;AACF;AACU;AACF;AACE;;AAEjD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uEAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,6BAA6B,qEAAW,CAAC,sEAAY;AACrD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,iEAAO;AACpC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,iEAAQ;AACrC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,kEAAQ;AACrC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,kEAAS;AACtC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,6BAA6B,gEAAM;AACnC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,qBAAqB,4DAAU;AAC/B;AACA;AACA,qBAAqB,6DAAW;AAChC;AACA;AACA,qBAAqB,2DAAS;AAC9B;AACA;AACA,qBAAqB,4DAAU;AAC/B;AACA;AACA,qBAAqB,8DAAY;AACjC;AACA;AACA,qBAAqB,8DAAY;AACjC;AACA;AACA,qBAAqB,2DAAS;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,qBAAqB,0EAAyB;AAC9C;AACA;AACA,qBAAqB,2EAA0B;AAC/C;AACA;AACA,qBAAqB,yEAAwB;AAC7C;AACA;AACA,qBAAqB,kEAAiB;AACtC;AACA;AACA,qBAAqB,oEAAmB;AACxC;AACA;AACA,qBAAqB,oEAAmB;AACxC;AACA;AACA,qBAAqB,yEAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,iEAAO;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,iEAAO;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0EAAiB;AAChC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEgF;;AAEhF,mD","file":"calendar-index-module~cascader-index-module~date-picker-index-module~drawer-index-module~form-index-~88225bee.js","sourcesContent":["import addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport isFirstDayOfMonth from 'date-fns/isFirstDayOfMonth';\nimport isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameHour from 'date-fns/isSameHour';\nimport isSameMinute from 'date-fns/isSameMinute';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameSecond from 'date-fns/isSameSecond';\nimport isSameYear from 'date-fns/isSameYear';\nimport isToday from 'date-fns/isToday';\nimport isValid from 'date-fns/isValid';\nimport setDay from 'date-fns/setDay';\nimport setMonth from 'date-fns/setMonth';\nimport setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport { warn } from 'ng-zorro-antd/core/logger';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: candy-date.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} rangeValue\n * @return {?}\n */\nfunction sortRangeValue(rangeValue) {\n    if (Array.isArray(rangeValue)) {\n        const [start, end] = rangeValue;\n        return start && end && start.isAfterSecond(end) ? [end, start] : [start, end];\n    }\n    return rangeValue;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeRangeValue(value) {\n    const [start, end] = value || [];\n    /** @type {?} */\n    const newStart = start || new CandyDate();\n    /** @type {?} */\n    const newEnd = (end === null || end === void 0 ? void 0 : end.isSameMonth(newStart)) ? end.addMonths(1) : end || newStart.addMonths(1);\n    return [newStart, newEnd];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction cloneDate(value) {\n    if (Array.isArray(value)) {\n        return value.map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => (v instanceof CandyDate ? v.clone() : null)));\n    }\n    else {\n        return value instanceof CandyDate ? value.clone() : null;\n    }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nclass CandyDate {\n    // locale: string; // Custom specified locale ID\n    /**\n     * @param {?=} date\n     */\n    constructor(date) {\n        if (date) {\n            if (date instanceof Date) {\n                this.nativeDate = date;\n            }\n            else if (typeof date === 'string' || typeof date === 'number') {\n                warn('The string type is not recommended for date-picker, use \"Date\" type');\n                this.nativeDate = new Date(date);\n            }\n            else {\n                throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n            }\n        }\n        else {\n            this.nativeDate = new Date();\n        }\n    }\n    // getLocale(): string {\n    //   return this.locale;\n    // }\n    // setLocale(locale: string): CandyDate {\n    //   this.locale = locale;\n    //   return this;\n    // }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    calendarStart(options) {\n        return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n    }\n    // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // -----------------------------------------------------------------------------\\\n    /**\n     * @return {?}\n     */\n    getYear() {\n        return this.nativeDate.getFullYear();\n    }\n    /**\n     * @return {?}\n     */\n    getMonth() {\n        return this.nativeDate.getMonth();\n    }\n    /**\n     * @return {?}\n     */\n    getDay() {\n        return this.nativeDate.getDay();\n    }\n    /**\n     * @return {?}\n     */\n    getTime() {\n        return this.nativeDate.getTime();\n    }\n    /**\n     * @return {?}\n     */\n    getDate() {\n        return this.nativeDate.getDate();\n    }\n    /**\n     * @return {?}\n     */\n    getHours() {\n        return this.nativeDate.getHours();\n    }\n    /**\n     * @return {?}\n     */\n    getMinutes() {\n        return this.nativeDate.getMinutes();\n    }\n    /**\n     * @return {?}\n     */\n    getSeconds() {\n        return this.nativeDate.getSeconds();\n    }\n    /**\n     * @return {?}\n     */\n    getMilliseconds() {\n        return this.nativeDate.getMilliseconds();\n    }\n    // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n    /**\n     * @return {?}\n     */\n    clone() {\n        return new CandyDate(new Date(this.nativeDate));\n    }\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} second\n     * @return {?}\n     */\n    setHms(hour, minute, second) {\n        return new CandyDate(this.nativeDate.setHours(hour, minute, second));\n    }\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    setYear(year) {\n        return new CandyDate(setYear(this.nativeDate, year));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    addYears(amount) {\n        return new CandyDate(addYears(this.nativeDate, amount));\n    }\n    // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    setMonth(month) {\n        return new CandyDate(setMonth(this.nativeDate, month));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    addMonths(amount) {\n        return new CandyDate(addMonths(this.nativeDate, amount));\n    }\n    /**\n     * @param {?} day\n     * @param {?=} options\n     * @return {?}\n     */\n    setDay(day, options) {\n        return new CandyDate(setDay(this.nativeDate, day, options));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    setDate(amount) {\n        /** @type {?} */\n        const date = new Date(this.nativeDate);\n        date.setDate(amount);\n        return new CandyDate(date);\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n    addDays(amount) {\n        return this.setDate(this.getDate() + amount);\n    }\n    /**\n     * @param {?} date\n     * @param {?=} grain\n     * @return {?}\n     */\n    isSame(date, grain = 'day') {\n        /** @type {?} */\n        let fn;\n        switch (grain) {\n            case 'year':\n                fn = isSameYear;\n                break;\n            case 'month':\n                fn = isSameMonth;\n                break;\n            case 'day':\n                fn = isSameDay;\n                break;\n            case 'hour':\n                fn = isSameHour;\n                break;\n            case 'minute':\n                fn = isSameMinute;\n                break;\n            case 'second':\n                fn = isSameSecond;\n                break;\n            default:\n                fn = isSameDay;\n                break;\n        }\n        return fn(this.nativeDate, this.toNativeDate(date));\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameYear(date) {\n        return this.isSame(date, 'year');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameMonth(date) {\n        return this.isSame(date, 'month');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameDay(date) {\n        return this.isSame(date, 'day');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameHour(date) {\n        return this.isSame(date, 'hour');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameMinute(date) {\n        return this.isSame(date, 'minute');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isSameSecond(date) {\n        return this.isSame(date, 'second');\n    }\n    /**\n     * @param {?} date\n     * @param {?=} grain\n     * @param {?=} isBefore\n     * @return {?}\n     */\n    compare(date, grain = 'day', isBefore = true) {\n        if (date === null) {\n            return false;\n        }\n        /** @type {?} */\n        let fn;\n        switch (grain) {\n            case 'year':\n                fn = differenceInCalendarYears;\n                break;\n            case 'month':\n                fn = differenceInCalendarMonths;\n                break;\n            case 'day':\n                fn = differenceInCalendarDays;\n                break;\n            case 'hour':\n                fn = differenceInHours;\n                break;\n            case 'minute':\n                fn = differenceInMinutes;\n                break;\n            case 'second':\n                fn = differenceInSeconds;\n                break;\n            default:\n                fn = differenceInCalendarDays;\n                break;\n        }\n        return isBefore ? fn(this.nativeDate, this.toNativeDate(date)) < 0 : fn(this.nativeDate, this.toNativeDate(date)) > 0;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeYear(date) {\n        return this.compare(date, 'year');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeMonth(date) {\n        return this.compare(date, 'month');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeDay(date) {\n        return this.compare(date, 'day');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeHour(date) {\n        return this.compare(date, 'hour');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeMinute(date) {\n        return this.compare(date, 'minute');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isBeforeSecond(date) {\n        return this.compare(date, 'second');\n    }\n    // TODO: isBefore\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterYear(date) {\n        return this.compare(date, 'year', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterMonth(date) {\n        return this.compare(date, 'month', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterDay(date) {\n        return this.compare(date, 'day', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterHour(date) {\n        return this.compare(date, 'hour', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterMinute(date) {\n        return this.compare(date, 'minute', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isAfterSecond(date) {\n        return this.compare(date, 'second', false);\n    }\n    // Equal to today accurate to \"day\"\n    /**\n     * @return {?}\n     */\n    isToday() {\n        return isToday(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n    isValid() {\n        return isValid(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n    isFirstDayOfMonth() {\n        return isFirstDayOfMonth(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n    isLastDayOfMonth() {\n        return isLastDayOfMonth(this.nativeDate);\n    }\n    /**\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    toNativeDate(date) {\n        return date instanceof CandyDate ? date.nativeDate : date;\n    }\n}\nif (false) {\n    /** @type {?} */\n    CandyDate.prototype.nativeDate;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: time.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/** @type {?} */\nconst timeUnits = [\n    ['Y', 1000 * 60 * 60 * 24 * 365],\n    ['M', 1000 * 60 * 60 * 24 * 30],\n    ['D', 1000 * 60 * 60 * 24],\n    ['H', 1000 * 60 * 60],\n    ['m', 1000 * 60],\n    ['s', 1000],\n    ['S', 1] // million seconds\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-time.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CandyDate, cloneDate, normalizeRangeValue, sortRangeValue, timeUnits };\n\n//# sourceMappingURL=ng-zorro-antd-core-time.js.map"],"sourceRoot":"webpack:///"}