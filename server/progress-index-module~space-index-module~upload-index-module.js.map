{"version":3,"sources":["./publish/components/progress/utils.ts","./publish/components/progress/progress.component.ts","./publish/components/progress/progress.module.ts","./publish/components/progress/typings.ts","./publish/components/progress/public-api.ts","./publish/components/progress/ng-zorro-antd-progress.ts"],"names":[],"mappings":"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","file":"progress-index-module~space-index-module~upload-index-module.js","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzProgressColorGradient, NzProgressGradientProgress } from './typings';\n\nfunction stripPercentToNumber(percent: string): number {\n  return +percent.replace('%', '');\n}\n\nexport const sortGradient = (gradients: NzProgressGradientProgress) => {\n  let tempArr: Array<{ key: number; value: string }> = [];\n\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nexport const handleCircleGradient = (strokeColor: NzProgressGradientProgress): Array<{ offset: string; color: string }> => {\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\n};\n\nexport const handleLinearGradient = (strokeColor: NzProgressColorGradient) => {\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest as NzProgressGradientProgress)\n      .map(({ key, value }) => `${value} ${key}%`)\n      .join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { NzConfigKey, NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';\nimport { InputNumber, isNotNil } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  NzProgressCirclePath,\n  NzProgressColorGradient,\n  NzProgressFormatter,\n  NzProgressGapPositionType,\n  NzProgressGradientProgress,\n  NzProgressStatusType,\n  NzProgressStepItem,\n  NzProgressStrokeColorType,\n  NzProgressStrokeLinecapType,\n  NzProgressTypeType\n} from './typings';\nimport { handleCircleGradient, handleLinearGradient } from './utils';\n\nlet gradientIdSeed = 0;\n\nconst NZ_CONFIG_MODULE_NAME: NzConfigKey = 'progress';\nconst statusIconNameMap = new Map([\n  ['success', 'check'],\n  ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n  ['normal', '#108ee9'],\n  ['exception', '#ff5500'],\n  ['success', '#87d068']\n]);\nconst defaultFormatter: NzProgressFormatter = (p: number): string => `${p}%`;\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-progress',\n  exportAs: 'nzProgress',\n  preserveWhitespaces: false,\n  template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType == 'line'\"\n      [class.ant-progress-small]=\"nzSize == 'small'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n})\nexport class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n  readonly _nzModuleName: NzConfigKey = NZ_CONFIG_MODULE_NAME;\n\n  static ngAcceptInputType_nzSuccessPercent: NumberInput;\n  static ngAcceptInputType_nzPercent: NumberInput;\n  static ngAcceptInputType_nzStrokeWidth: NumberInput;\n  static ngAcceptInputType_nzGapDegree: NumberInput;\n  static ngAcceptInputType_nzSteps: NumberInput;\n\n  @Input() @WithConfig() nzShowInfo: boolean = true;\n  @Input() nzWidth = 132;\n  @Input() @WithConfig() nzStrokeColor?: NzProgressStrokeColorType = undefined;\n  @Input() @WithConfig() nzSize: 'default' | 'small' = 'default';\n  @Input() nzFormat?: NzProgressFormatter;\n  @Input() @InputNumber() nzSuccessPercent?: number;\n  @Input() @InputNumber() nzPercent: number = 0;\n  @Input() @WithConfig() @InputNumber() nzStrokeWidth?: number = undefined;\n  @Input() @WithConfig() @InputNumber() nzGapDegree?: number = undefined;\n  @Input() nzStatus?: NzProgressStatusType;\n  @Input() nzType: NzProgressTypeType = 'line';\n  @Input() @WithConfig() nzGapPosition: NzProgressGapPositionType = 'top';\n  @Input() @WithConfig() nzStrokeLinecap: NzProgressStrokeLinecapType = 'round';\n\n  @Input() @InputNumber() nzSteps: number = 0;\n\n  steps: NzProgressStepItem[] = [];\n\n  /** Gradient style when `nzType` is `line`. */\n  lineGradient: string | null = null;\n\n  /** If user uses gradient color. */\n  isGradient = false;\n\n  /** If the linear progress is a step progress. */\n  isSteps = false;\n\n  /**\n   * Each progress whose `nzType` is circle or dashboard should have unique id to\n   * define `<linearGradient>`.\n   */\n  gradientId = gradientIdSeed++;\n\n  /** Paths to rendered in the template. */\n  progressCirclePath: NzProgressCirclePath[] = [];\n  circleGradient?: Array<{ offset: string; color: string }>;\n  trailPathStyle: NgStyleInterface | null = null;\n  pathString?: string;\n  icon!: string;\n\n  dir: Direction = 'ltr';\n\n  trackByFn = (index: number) => `${index}`;\n\n  get formatter(): NzProgressFormatter {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status(): NzProgressStatusType {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth(): number {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle(): boolean {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  private cachedStatus: NzProgressStatusType = 'normal';\n  private inferredStatus: NzProgressStatusType = 'normal';\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    public nzConfigService: NzConfigService,\n    @Optional() private directionality: Directionality\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const {\n      nzSteps,\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent,\n      nzStrokeWidth\n    } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent! >= 100) || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n\n    if (nzPercent || nzSteps || nzStrokeWidth) {\n      this.isSteps = this.nzSteps > 0;\n      if (this.isSteps) {\n        this.getSteps();\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateIcon();\n        this.setStrokeColor();\n        this.getCirclePaths();\n      });\n\n    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction: Direction) => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n\n    this.dir = this.directionality.value;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIcon(): void {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n\n  /**\n   * Calculate step render configs.\n   */\n  private getSteps(): void {\n    const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n\n    const steps = [];\n\n    for (let i = 0; i < this.nzSteps; i++) {\n      let color;\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      steps.push(stepStyle);\n    }\n\n    this.steps = steps;\n  }\n\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  private getCirclePaths(): void {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent!, this.nzPercent] : [this.nzPercent];\n\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n\n    // Calculate styles for each path.\n    this.progressCirclePath = values\n      .map((value, index) => {\n        const isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n          strokePathStyle: {\n            stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (this.nzStrokeColor as string)) : null,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`\n          }\n        };\n      })\n      .reverse();\n  }\n\n  private setStrokeColor(): void {\n    const color = this.nzStrokeColor;\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color as NzProgressColorGradient);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor as NzProgressGradientProgress);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzProgressComponent } from './progress.component';\n\n@NgModule({\n  exports: [NzProgressComponent],\n  declarations: [NzProgressComponent],\n  imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n})\nexport class NzProgressModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { TemplateRef } from '@angular/core';\nimport { NgStyleInterface } from 'ng-zorro-antd/core/types';\n\nexport type NzProgressGapPositionType = 'top' | 'bottom' | 'left' | 'right';\n\nexport type NzProgressStatusType = 'success' | 'exception' | 'active' | 'normal';\n\nexport type NzProgressTypeType = 'line' | 'circle' | 'dashboard';\n\nexport type NzProgressStrokeLinecapType = 'round' | 'square';\n\nexport interface NzProgressGradientProgress {\n  [percent: string]: string;\n}\n\nexport interface NzProgressGradientFromTo {\n  from: string;\n  to: string;\n}\n\nexport type NzProgressColorGradient = { direction?: string } & (NzProgressGradientProgress | NzProgressGradientFromTo);\n\nexport type NzProgressStrokeColorType = string | NzProgressColorGradient;\n\nexport type NzProgressFormatter = ((percent: number) => string) | TemplateRef<{ $implicit: number }>;\n\nexport interface NzProgressCirclePath {\n  stroke: string | null;\n  strokePathStyle: NgStyleInterface;\n}\n\nexport interface NzProgressStepItem {\n  backgroundColor: string;\n  width: string;\n  height: string;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzProgressModule } from './progress.module';\nexport { NzProgressComponent } from './progress.component';\nexport * from './typings';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}